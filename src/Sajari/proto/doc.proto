syntax = "proto3";

package sajari.engine.store.doc;

// Document is a service which defines methods for adding, getting and
// deleting documents from a collection.
service Document {
  // Add creates new documents in the collection returning a key for each
  // stored document.  The key can then be used in subsequent requests to
  // get/delete/patch.
  rpc Add (Documents) returns (Keys);

  // Get retrieves the documents corresponding to the listed keys.
  rpc Get (Keys) returns (Documents);

  // Delete removes the documents corresponding to the listed keys.
  rpc Delete (Keys) returns (Empty);

  // Patch applies meta (key-value) updates to documents corresponding to
  // keys.
  rpc Patch (KeysMetas) returns (Empty);
}

// Empty message returned from calls that have no response.
message Empty {}

// Documents is a message which represents a list of documents.
message Documents {
  // Document is a single document made up of key-value pairs.
  message Document {
    // Meta is a map of key-value pairs, The value should be a
    // JSON-encoded representation of an engine-recognised type.
    map<string, bytes> meta = 1;
  }

  // The list of documents.
  repeated Document documents = 1;
}

// Keys is a list of keys, each key identifying a single document in the store.
message Keys {
  // Key is a key-value pair that uniquely determines a document in a collection.
  // Any unique field in a collection can be used to create a key.
  message Key {
    // Field is the meta field (must be a unique field).
    string field = 1;

    // Value is the identifying value.
    bytes value = 2;
  }

  // The list of keys.
  repeated Key keys = 1;
}

message KeysMetas {
  message KeyMeta {
    // The key used to identify the document to be patched.
    Keys.Key key = 1;

    // Map of key-value pairs to patch data in the collection document.  The
    // value should be a JSON-encoded representation of an engine-recognised
    // type.  Null is used to clear a value in the collection.
    map<string, bytes> meta = 2;
  }

  repeated KeyMeta keys_metas = 1;
}