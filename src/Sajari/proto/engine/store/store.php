<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: engine/store/store.proto
//   Date: 2016-12-12 02:45:21

namespace sajari\engine\store {

  class Shard extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.Shard');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sajari\engine\store\Shard
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sajari\engine\store\Shard
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \sajari\engine\store\Shard
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \sajari\engine\store\Shard
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store {

  class ShardInfo extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\Shard */
    public $shard = null;
    
    /**  @var int */
    public $num_docs = null;
    
    /**  @var int */
    public $docs_size = null;
    
    /**  @var int */
    public $revs_size = null;
    
    /**  @var int */
    public $fwds_size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.ShardInfo');

      // OPTIONAL MESSAGE shard = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\store\Shard';
      $descriptor->addField($f);

      // OPTIONAL INT32 num_docs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_docs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 docs_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "docs_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 revs_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "revs_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 fwds_size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fwds_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(1);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \sajari\engine\store\ShardInfo
     */
    public function clearShard(){
      return $this->_clear(1);
    }
    
    /**
     * Get <shard> value
     *
     * @return \sajari\engine\store\Shard
     */
    public function getShard(){
      return $this->_get(1);
    }
    
    /**
     * Set <shard> value
     *
     * @param \sajari\engine\store\Shard $value
     * @return \sajari\engine\store\ShardInfo
     */
    public function setShard(\sajari\engine\store\Shard $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_docs> has a value
     *
     * @return boolean
     */
    public function hasNumDocs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_docs> value
     *
     * @return \sajari\engine\store\ShardInfo
     */
    public function clearNumDocs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_docs> value
     *
     * @return int
     */
    public function getNumDocs(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_docs> value
     *
     * @param int $value
     * @return \sajari\engine\store\ShardInfo
     */
    public function setNumDocs( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <docs_size> has a value
     *
     * @return boolean
     */
    public function hasDocsSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <docs_size> value
     *
     * @return \sajari\engine\store\ShardInfo
     */
    public function clearDocsSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <docs_size> value
     *
     * @return int
     */
    public function getDocsSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <docs_size> value
     *
     * @param int $value
     * @return \sajari\engine\store\ShardInfo
     */
    public function setDocsSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <revs_size> has a value
     *
     * @return boolean
     */
    public function hasRevsSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <revs_size> value
     *
     * @return \sajari\engine\store\ShardInfo
     */
    public function clearRevsSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <revs_size> value
     *
     * @return int
     */
    public function getRevsSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <revs_size> value
     *
     * @param int $value
     * @return \sajari\engine\store\ShardInfo
     */
    public function setRevsSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fwds_size> has a value
     *
     * @return boolean
     */
    public function hasFwdsSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fwds_size> value
     *
     * @return \sajari\engine\store\ShardInfo
     */
    public function clearFwdsSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fwds_size> value
     *
     * @return int
     */
    public function getFwdsSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <fwds_size> value
     *
     * @param int $value
     * @return \sajari\engine\store\ShardInfo
     */
    public function setFwdsSize( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace sajari\engine\store {

  class Info extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $num_shards = null;
    
    /**  @var int */
    public $num_docs = null;
    
    /**  @var int */
    public $num_terms = null;
    
    /**  @var int */
    public $terms_size = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var \sajari\engine\store\ShardInfo[]  */
    public $shards = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.Info');

      // OPTIONAL INT32 num_shards = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "num_shards";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_docs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_docs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_terms = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "num_terms";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 terms_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "terms_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE shards = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "shards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\ShardInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <num_shards> has a value
     *
     * @return boolean
     */
    public function hasNumShards(){
      return $this->_has(1);
    }
    
    /**
     * Clear <num_shards> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearNumShards(){
      return $this->_clear(1);
    }
    
    /**
     * Get <num_shards> value
     *
     * @return int
     */
    public function getNumShards(){
      return $this->_get(1);
    }
    
    /**
     * Set <num_shards> value
     *
     * @param int $value
     * @return \sajari\engine\store\Info
     */
    public function setNumShards( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_docs> has a value
     *
     * @return boolean
     */
    public function hasNumDocs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_docs> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearNumDocs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_docs> value
     *
     * @return int
     */
    public function getNumDocs(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_docs> value
     *
     * @param int $value
     * @return \sajari\engine\store\Info
     */
    public function setNumDocs( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <num_terms> has a value
     *
     * @return boolean
     */
    public function hasNumTerms(){
      return $this->_has(3);
    }
    
    /**
     * Clear <num_terms> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearNumTerms(){
      return $this->_clear(3);
    }
    
    /**
     * Get <num_terms> value
     *
     * @return int
     */
    public function getNumTerms(){
      return $this->_get(3);
    }
    
    /**
     * Set <num_terms> value
     *
     * @param int $value
     * @return \sajari\engine\store\Info
     */
    public function setNumTerms( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <terms_size> has a value
     *
     * @return boolean
     */
    public function hasTermsSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <terms_size> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearTermsSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <terms_size> value
     *
     * @return int
     */
    public function getTermsSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <terms_size> value
     *
     * @param int $value
     * @return \sajari\engine\store\Info
     */
    public function setTermsSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(5);
    }
    
    /**
     * Clear <path> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearPath(){
      return $this->_clear(5);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(5);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \sajari\engine\store\Info
     */
    public function setPath( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <shards> has a value
     *
     * @return boolean
     */
    public function hasShards(){
      return $this->_has(6);
    }
    
    /**
     * Clear <shards> value
     *
     * @return \sajari\engine\store\Info
     */
    public function clearShards(){
      return $this->_clear(6);
    }
    
    /**
     * Get <shards> value
     *
     * @param int $idx
     * @return \sajari\engine\store\ShardInfo
     */
    public function getShards($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <shards> value
     *
     * @param \sajari\engine\store\ShardInfo $value
     * @return \sajari\engine\store\Info
     */
    public function setShards(\sajari\engine\store\ShardInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <shards>
     *
     * @return \sajari\engine\store\ShardInfo[]
     */
    public function getShardsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <shards>
     *
     * @param \sajari\engine\store\ShardInfo $value
     * @return \sajari\engine\store\Info
     */
    public function addShards(\sajari\engine\store\ShardInfo $value){
     return $this->_add(6, $value);
    }
  }
}

namespace sajari\engine\store {

  class Transform extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.Transform');

      // OPTIONAL STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \sajari\engine\store\Transform
     */
    public function clearIdentifier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(1);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \sajari\engine\store\Transform
     */
    public function setIdentifier( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\store {

  class AddRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $fingerprints = array();
    
    /**  @var \sajari\engine\store\Transform[]  */
    public $transforms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.AddRequest');

      // REPEATED STRING fingerprints = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fingerprints";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE transforms = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transforms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\Transform';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fingerprints> has a value
     *
     * @return boolean
     */
    public function hasFingerprints(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fingerprints> value
     *
     * @return \sajari\engine\store\AddRequest
     */
    public function clearFingerprints(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fingerprints> value
     *
     * @param int $idx
     * @return string
     */
    public function getFingerprints($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <fingerprints> value
     *
     * @param string $value
     * @return \sajari\engine\store\AddRequest
     */
    public function setFingerprints( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <fingerprints>
     *
     * @return string[]
     */
    public function getFingerprintsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <fingerprints>
     *
     * @param string $value
     * @return \sajari\engine\store\AddRequest
     */
    public function addFingerprints( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <transforms> has a value
     *
     * @return boolean
     */
    public function hasTransforms(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transforms> value
     *
     * @return \sajari\engine\store\AddRequest
     */
    public function clearTransforms(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transforms> value
     *
     * @param int $idx
     * @return \sajari\engine\store\Transform
     */
    public function getTransforms($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <transforms> value
     *
     * @param \sajari\engine\store\Transform $value
     * @return \sajari\engine\store\AddRequest
     */
    public function setTransforms(\sajari\engine\store\Transform $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <transforms>
     *
     * @return \sajari\engine\store\Transform[]
     */
    public function getTransformsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <transforms>
     *
     * @param \sajari\engine\store\Transform $value
     * @return \sajari\engine\store\AddRequest
     */
    public function addTransforms(\sajari\engine\store\Transform $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store {

  class AddResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.AddResponse');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\AddResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\AddResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\AddResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store {

  class ControlClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sajari\engine\store\Shard $input
     */
    public function CreateShard(\sajari\engine\store\Shard $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/CreateShard', $argument, '\sajari\engine\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\Shard $input
     */
    public function LoadShard(\sajari\engine\store\Shard $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/LoadShard', $argument, '\sajari\engine\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\Shard $input
     */
    public function UnloadShard(\sajari\engine\store\Shard $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/UnloadShard', $argument, '\sajari\engine\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\Shard $input
     */
    public function DeleteShard(\sajari\engine\store\Shard $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/DeleteShard', $argument, '\sajari\engine\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\Empty $input
     */
    public function GetInfo(\sajari\engine\Empty $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/GetInfo', $argument, '\sajari\engine\store\Info::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\AddRequest $input
     */
    public function Add(\sajari\engine\store\AddRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.Control/Add', $argument, '\sajari\engine\store\AddResponse::deserialize', $metadata, $options);
    }
  }
}
