<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: engine/store/record/record.proto
//   Date: 2017-01-10 02:02:13

namespace sajari\engine\store\record {

  class Transform extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.Transform');

      // OPTIONAL STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \sajari\engine\store\record\Transform
     */
    public function clearIdentifier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(1);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \sajari\engine\store\record\Transform
     */
    public function setIdentifier( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\store\record\Record {

  class ValuesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \sajari\engine\Value */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.Record.ValuesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\record\Record\ValuesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\store\record\Record\ValuesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\record\Record\ValuesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \sajari\engine\Value
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\store\record\Record\ValuesEntry
     */
    public function setValue(\sajari\engine\Value $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class Record extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\Record\ValuesEntry[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.Record');

      // REPEATED MESSAGE values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\Record\ValuesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <values> value
     *
     * @return \sajari\engine\store\record\Record
     */
    public function clearValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\Record\ValuesEntry
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \sajari\engine\store\record\Record\ValuesEntry $value
     * @return \sajari\engine\store\record\Record
     */
    public function setValues(\sajari\engine\store\record\Record\ValuesEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \sajari\engine\store\record\Record\ValuesEntry[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \sajari\engine\store\record\Record\ValuesEntry $value
     * @return \sajari\engine\store\record\Record
     */
    public function addValues(\sajari\engine\store\record\Record\ValuesEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class Records extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\Record[]  */
    public $records = array();
    
    /**  @var \sajari\engine\store\record\Transform[]  */
    public $transforms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.Records');

      // REPEATED MESSAGE records = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "records";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\Record';
      $descriptor->addField($f);

      // REPEATED MESSAGE transforms = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transforms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\Transform';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <records> has a value
     *
     * @return boolean
     */
    public function hasRecords(){
      return $this->_has(1);
    }
    
    /**
     * Clear <records> value
     *
     * @return \sajari\engine\store\record\Records
     */
    public function clearRecords(){
      return $this->_clear(1);
    }
    
    /**
     * Get <records> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\Record
     */
    public function getRecords($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <records> value
     *
     * @param \sajari\engine\store\record\Record $value
     * @return \sajari\engine\store\record\Records
     */
    public function setRecords(\sajari\engine\store\record\Record $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <records>
     *
     * @return \sajari\engine\store\record\Record[]
     */
    public function getRecordsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <records>
     *
     * @param \sajari\engine\store\record\Record $value
     * @return \sajari\engine\store\record\Records
     */
    public function addRecords(\sajari\engine\store\record\Record $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <transforms> has a value
     *
     * @return boolean
     */
    public function hasTransforms(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transforms> value
     *
     * @return \sajari\engine\store\record\Records
     */
    public function clearTransforms(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transforms> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\Transform
     */
    public function getTransforms($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <transforms> value
     *
     * @param \sajari\engine\store\record\Transform $value
     * @return \sajari\engine\store\record\Records
     */
    public function setTransforms(\sajari\engine\store\record\Transform $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <transforms>
     *
     * @return \sajari\engine\store\record\Transform[]
     */
    public function getTransformsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <transforms>
     *
     * @param \sajari\engine\store\record\Transform $value
     * @return \sajari\engine\store\record\Records
     */
    public function addTransforms(\sajari\engine\store\record\Transform $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class AddResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Key[]  */
    public $keys = array();
    
    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.AddResponse');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Key';
      $descriptor->addField($f);

      // REPEATED MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \sajari\engine\store\record\AddResponse
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \sajari\engine\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\AddResponse
     */
    public function setKeys(\sajari\engine\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \sajari\engine\Key[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\AddResponse
     */
    public function addKeys(\sajari\engine\Key $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\AddResponse
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\AddResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\AddResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class GetResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\Record[]  */
    public $records = array();
    
    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.GetResponse');

      // REPEATED MESSAGE records = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "records";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\Record';
      $descriptor->addField($f);

      // REPEATED MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <records> has a value
     *
     * @return boolean
     */
    public function hasRecords(){
      return $this->_has(1);
    }
    
    /**
     * Clear <records> value
     *
     * @return \sajari\engine\store\record\GetResponse
     */
    public function clearRecords(){
      return $this->_clear(1);
    }
    
    /**
     * Get <records> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\Record
     */
    public function getRecords($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <records> value
     *
     * @param \sajari\engine\store\record\Record $value
     * @return \sajari\engine\store\record\GetResponse
     */
    public function setRecords(\sajari\engine\store\record\Record $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <records>
     *
     * @return \sajari\engine\store\record\Record[]
     */
    public function getRecordsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <records>
     *
     * @param \sajari\engine\store\record\Record $value
     * @return \sajari\engine\store\record\GetResponse
     */
    public function addRecords(\sajari\engine\store\record\Record $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\GetResponse
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\GetResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\GetResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class DeleteResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.DeleteResponse');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\DeleteResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\DeleteResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\DeleteResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class PatchResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.PatchResponse');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\PatchResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\PatchResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\PatchResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class Keys extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Key[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.Keys');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \sajari\engine\store\record\Keys
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \sajari\engine\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\Keys
     */
    public function setKeys(\sajari\engine\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \sajari\engine\Key[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\Keys
     */
    public function addKeys(\sajari\engine\Key $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record\KeysValues\KeyValues {

  class Value extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Value */
    public $set = null;
    
    /**  @var \sajari\engine\Value */
    public $increment = null;
    
    /**  @var \sajari\engine\Value */
    public $append = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeysValues.KeyValues.Value');

      // OPTIONAL MESSAGE set = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE increment = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "increment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE append = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "append";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <set> has a value
     *
     * @return boolean
     */
    public function hasSet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <set> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function clearSet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <set> value
     *
     * @return \sajari\engine\Value
     */
    public function getSet(){
      return $this->_get(1);
    }
    
    /**
     * Set <set> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function setSet(\sajari\engine\Value $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <increment> has a value
     *
     * @return boolean
     */
    public function hasIncrement(){
      return $this->_has(2);
    }
    
    /**
     * Clear <increment> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function clearIncrement(){
      return $this->_clear(2);
    }
    
    /**
     * Get <increment> value
     *
     * @return \sajari\engine\Value
     */
    public function getIncrement(){
      return $this->_get(2);
    }
    
    /**
     * Set <increment> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function setIncrement(\sajari\engine\Value $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <append> has a value
     *
     * @return boolean
     */
    public function hasAppend(){
      return $this->_has(3);
    }
    
    /**
     * Clear <append> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function clearAppend(){
      return $this->_clear(3);
    }
    
    /**
     * Get <append> value
     *
     * @return \sajari\engine\Value
     */
    public function getAppend(){
      return $this->_get(3);
    }
    
    /**
     * Set <append> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function setAppend(\sajari\engine\Value $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\store\record\KeysValues\KeyValues {

  class ValuesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \sajari\engine\store\record\KeysValues\KeyValues\Value */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeysValues.KeyValues.ValuesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\store\record\KeysValues\KeyValues\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\Value
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \sajari\engine\store\record\KeysValues\KeyValues\Value $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry
     */
    public function setValue(\sajari\engine\store\record\KeysValues\KeyValues\Value $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store\record\KeysValues {

  class KeyValues extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Key */
    public $key = null;
    
    /**  @var \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeysValues.KeyValues');

      // OPTIONAL MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Key';
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return \sajari\engine\Key
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function setKey(\sajari\engine\Key $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <values> value
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function clearValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry
     */
    public function getValues($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function setValues(\sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry[]
     */
    public function getValuesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry $value
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function addValues(\sajari\engine\store\record\KeysValues\KeyValues\ValuesEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class KeysValues extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\KeysValues\KeyValues[]  */
    public $keys_values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeysValues');

      // REPEATED MESSAGE keys_values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\KeysValues\KeyValues';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys_values> has a value
     *
     * @return boolean
     */
    public function hasKeysValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys_values> value
     *
     * @return \sajari\engine\store\record\KeysValues
     */
    public function clearKeysValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys_values> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\KeysValues\KeyValues
     */
    public function getKeysValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys_values> value
     *
     * @param \sajari\engine\store\record\KeysValues\KeyValues $value
     * @return \sajari\engine\store\record\KeysValues
     */
    public function setKeysValues(\sajari\engine\store\record\KeysValues\KeyValues $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys_values>
     *
     * @return \sajari\engine\store\record\KeysValues\KeyValues[]
     */
    public function getKeysValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys_values>
     *
     * @param \sajari\engine\store\record\KeysValues\KeyValues $value
     * @return \sajari\engine\store\record\KeysValues
     */
    public function addKeysValues(\sajari\engine\store\record\KeysValues\KeyValues $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class SetRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\KeyScores[]  */
    public $keys_scores = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.SetRequest');

      // REPEATED MESSAGE keys_scores = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys_scores";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\KeyScores';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys_scores> has a value
     *
     * @return boolean
     */
    public function hasKeysScores(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys_scores> value
     *
     * @return \sajari\engine\store\record\SetRequest
     */
    public function clearKeysScores(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys_scores> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\KeyScores
     */
    public function getKeysScores($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys_scores> value
     *
     * @param \sajari\engine\store\record\KeyScores $value
     * @return \sajari\engine\store\record\SetRequest
     */
    public function setKeysScores(\sajari\engine\store\record\KeyScores $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys_scores>
     *
     * @return \sajari\engine\store\record\KeyScores[]
     */
    public function getKeysScoresList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys_scores>
     *
     * @param \sajari\engine\store\record\KeyScores $value
     * @return \sajari\engine\store\record\SetRequest
     */
    public function addKeysScores(\sajari\engine\store\record\KeyScores $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class SetResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.SetResponse');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\SetResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\SetResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\SetResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class IncrementRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\record\KeyScores[]  */
    public $keys_scores = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.IncrementRequest');

      // REPEATED MESSAGE keys_scores = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys_scores";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\KeyScores';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys_scores> has a value
     *
     * @return boolean
     */
    public function hasKeysScores(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys_scores> value
     *
     * @return \sajari\engine\store\record\IncrementRequest
     */
    public function clearKeysScores(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys_scores> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\KeyScores
     */
    public function getKeysScores($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys_scores> value
     *
     * @param \sajari\engine\store\record\KeyScores $value
     * @return \sajari\engine\store\record\IncrementRequest
     */
    public function setKeysScores(\sajari\engine\store\record\KeyScores $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys_scores>
     *
     * @return \sajari\engine\store\record\KeyScores[]
     */
    public function getKeysScoresList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys_scores>
     *
     * @param \sajari\engine\store\record\KeyScores $value
     * @return \sajari\engine\store\record\IncrementRequest
     */
    public function addKeysScores(\sajari\engine\store\record\KeyScores $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class IncrementResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Status[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.IncrementResponse');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sajari\engine\store\record\IncrementResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\IncrementResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\store\record\IncrementResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\record\KeyScores {

  class Score extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $terms = array();
    
    /**  @var int */
    public $count = null;
    
    /**  @var float */
    public $score = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeyScores.Score');

      // REPEATED STRING terms = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "terms";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms(){
      return $this->_has(1);
    }
    
    /**
     * Clear <terms> value
     *
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function clearTerms(){
      return $this->_clear(1);
    }
    
    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return string
     */
    public function getTerms($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <terms> value
     *
     * @param string $value
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function setTerms( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <terms>
     *
     * @return string[]
     */
    public function getTermsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <terms>
     *
     * @param string $value
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function addTerms( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(3);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function clearScore(){
      return $this->_clear(3);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(3);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function setScore( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class KeyScores extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\Key */
    public $key = null;
    
    /**  @var \sajari\engine\store\record\KeyScores\Score[]  */
    public $scores = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.record.KeyScores');

      // OPTIONAL MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Key';
      $descriptor->addField($f);

      // REPEATED MESSAGE scores = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "scores";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\record\KeyScores\Score';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\record\KeyScores
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return \sajari\engine\Key
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\store\record\KeyScores
     */
    public function setKey(\sajari\engine\Key $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <scores> has a value
     *
     * @return boolean
     */
    public function hasScores(){
      return $this->_has(2);
    }
    
    /**
     * Clear <scores> value
     *
     * @return \sajari\engine\store\record\KeyScores
     */
    public function clearScores(){
      return $this->_clear(2);
    }
    
    /**
     * Get <scores> value
     *
     * @param int $idx
     * @return \sajari\engine\store\record\KeyScores\Score
     */
    public function getScores($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <scores> value
     *
     * @param \sajari\engine\store\record\KeyScores\Score $value
     * @return \sajari\engine\store\record\KeyScores
     */
    public function setScores(\sajari\engine\store\record\KeyScores\Score $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <scores>
     *
     * @return \sajari\engine\store\record\KeyScores\Score[]
     */
    public function getScoresList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <scores>
     *
     * @param \sajari\engine\store\record\KeyScores\Score $value
     * @return \sajari\engine\store\record\KeyScores
     */
    public function addScores(\sajari\engine\store\record\KeyScores\Score $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\record {

  class StoreClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sajari\engine\store\record\Records $input
     */
    public function Add(\sajari\engine\store\record\Records $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Store/Add', $argument, '\sajari\engine\store\record\AddResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\record\Keys $input
     */
    public function Get(\sajari\engine\store\record\Keys $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Store/Get', $argument, '\sajari\engine\store\record\GetResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\record\Keys $input
     */
    public function Delete(\sajari\engine\store\record\Keys $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Store/Delete', $argument, '\sajari\engine\store\record\DeleteResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\record\KeysValues $input
     */
    public function Patch(\sajari\engine\store\record\KeysValues $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Store/Patch', $argument, '\sajari\engine\store\record\PatchResponse::deserialize', $metadata, $options);
    }
  }
}
namespace sajari\engine\store\record {

  class ScoreClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sajari\engine\store\record\SetRequest $input
     */
    public function Set(\sajari\engine\store\record\SetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Score/Set', $argument, '\sajari\engine\store\record\SetResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\record\IncrementRequest $input
     */
    public function Increment(\sajari\engine\store\record\IncrementRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.record.Score/Increment', $argument, '\sajari\engine\store\record\IncrementResponse::deserialize', $metadata, $options);
    }
  }
}
