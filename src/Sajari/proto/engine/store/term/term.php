<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: engine/store/term/term.proto
//   Date: 2016-12-12 02:45:22

namespace sajari\engine\store\term {

  class Values extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.term.Values');

      // REPEATED STRING values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <values> value
     *
     * @return \sajari\engine\store\term\Values
     */
    public function clearValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param string $value
     * @return \sajari\engine\store\term\Values
     */
    public function setValues( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \sajari\engine\store\term\Values
     */
    public function addValues( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\term\Infos {

  class Info extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $num_docs = null;
    
    /**  @var int */
    public $num_words = null;
    
    /**  @var int */
    public $hardcoded = null;
    
    /**  @var int */
    public $infogain = null;
    
    /**  @var int */
    public $pos = null;
    
    /**  @var int */
    public $neg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.term.Infos.Info');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 num_docs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "num_docs";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 num_words = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "num_words";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hardcoded = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "hardcoded";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 infogain = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "infogain";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pos = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 neg = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "neg";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <num_docs> has a value
     *
     * @return boolean
     */
    public function hasNumDocs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <num_docs> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearNumDocs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <num_docs> value
     *
     * @return int
     */
    public function getNumDocs(){
      return $this->_get(3);
    }
    
    /**
     * Set <num_docs> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setNumDocs( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <num_words> has a value
     *
     * @return boolean
     */
    public function hasNumWords(){
      return $this->_has(4);
    }
    
    /**
     * Clear <num_words> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearNumWords(){
      return $this->_clear(4);
    }
    
    /**
     * Get <num_words> value
     *
     * @return int
     */
    public function getNumWords(){
      return $this->_get(4);
    }
    
    /**
     * Set <num_words> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setNumWords( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <hardcoded> has a value
     *
     * @return boolean
     */
    public function hasHardcoded(){
      return $this->_has(5);
    }
    
    /**
     * Clear <hardcoded> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearHardcoded(){
      return $this->_clear(5);
    }
    
    /**
     * Get <hardcoded> value
     *
     * @return int
     */
    public function getHardcoded(){
      return $this->_get(5);
    }
    
    /**
     * Set <hardcoded> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setHardcoded( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <infogain> has a value
     *
     * @return boolean
     */
    public function hasInfogain(){
      return $this->_has(6);
    }
    
    /**
     * Clear <infogain> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearInfogain(){
      return $this->_clear(6);
    }
    
    /**
     * Get <infogain> value
     *
     * @return int
     */
    public function getInfogain(){
      return $this->_get(6);
    }
    
    /**
     * Set <infogain> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setInfogain( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearPos(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pos> value
     *
     * @return int
     */
    public function getPos(){
      return $this->_get(7);
    }
    
    /**
     * Set <pos> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setPos( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <neg> has a value
     *
     * @return boolean
     */
    public function hasNeg(){
      return $this->_has(8);
    }
    
    /**
     * Clear <neg> value
     *
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function clearNeg(){
      return $this->_clear(8);
    }
    
    /**
     * Get <neg> value
     *
     * @return int
     */
    public function getNeg(){
      return $this->_get(8);
    }
    
    /**
     * Set <neg> value
     *
     * @param int $value
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function setNeg( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace sajari\engine\store\term {

  class Infos extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\term\Infos\Info[]  */
    public $infos = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.term.Infos');

      // REPEATED MESSAGE infos = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "infos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\term\Infos\Info';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <infos> has a value
     *
     * @return boolean
     */
    public function hasInfos(){
      return $this->_has(1);
    }
    
    /**
     * Clear <infos> value
     *
     * @return \sajari\engine\store\term\Infos
     */
    public function clearInfos(){
      return $this->_clear(1);
    }
    
    /**
     * Get <infos> value
     *
     * @param int $idx
     * @return \sajari\engine\store\term\Infos\Info
     */
    public function getInfos($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <infos> value
     *
     * @param \sajari\engine\store\term\Infos\Info $value
     * @return \sajari\engine\store\term\Infos
     */
    public function setInfos(\sajari\engine\store\term\Infos\Info $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <infos>
     *
     * @return \sajari\engine\store\term\Infos\Info[]
     */
    public function getInfosList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <infos>
     *
     * @param \sajari\engine\store\term\Infos\Info $value
     * @return \sajari\engine\store\term\Infos
     */
    public function addInfos(\sajari\engine\store\term\Infos\Info $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\term {

  class TermClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sajari\engine\store\term\Values $input
     */
    public function Get(\sajari\engine\store\term\Values $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.term.Term/Get', $argument, '\sajari\engine\store\term\Infos::deserialize', $metadata, $options);
    }
  }
}
