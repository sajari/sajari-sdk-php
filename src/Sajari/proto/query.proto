syntax = "proto3";

package sajari.engine.query;

// Service Query defines methods for querying an engine collection.
service Query {
  // Search takes a search request and returns a corresponding response.
  rpc Search (Request) returns (Response);

  // Evaluate takes a search request and a document and runs the search against
  // the document.
  rpc Evaluate (EvaluateRequest) returns (Response);

  // Compare takes two documents and a search Request
  rpc Compare (CompareRequest) returns (Response);
}

// Request encompases all the parameters necessary to make a search.
message Request {
  // Body text of the query.
  string body = 1;

  // Weighted body text.
  repeated WeightedBody weighted_body = 2;

  // Terms are the lowest level of index query input.
  repeated Term terms = 3;

  // Filters to be applied (exclude documents from results).
  Filter filter = 4;

  // MetaBoosts to be applied (change document scoring).
  repeated MetaBoost meta_boosts = 5;

  // IndexBoosts to be applied (change document scoring).
  repeated IndexBoost index_boosts = 6;

  // Page of results to return.
  int32 page = 7;

  // Max number of results to return.
  int32 max_results = 8;

  // Field to be returned in results, if empty then all are returned.
  repeated string fields = 9;

  // Sort ordering applied to results.
  repeated Sort sort = 10;

  // Aggregates to be run on the result set.
  map<string, Aggregate> aggregates = 11;
}

// Term is the lowest level of index-based query input that can be specified.
message Term {
  // Term string value
  string value = 1;

  // Field that the term is take from.
  string field = 2;

  // Number of positive interactions (uint16).
  uint32 pos = 3;

  // Number of negative interactions (uint16).
  uint32 neg = 4;

  // Significance of the term (uint16).
  double potency = 5;

  // Word offset (context) (uint16).
  uint32 word_offset = 6;

  // Paragraph offset (context) (uint16).
  uint32 para_offset = 7;
}

// EvaluateRequest contains all parameters necessary to make an Evaluate call.
message EvaluateRequest {
  // Search request to perform.
  Request request = 1;

  // Document to search against.
  map<string, bytes> document = 2;
}

// CompareRequest contains all parameters necessary to make a Compare call.
message CompareRequest {
  // Search request (template) to substitute document values into.
  Request request = 1;

  // Reference document which will be converted into the search request.
  map<string, bytes> ref_document = 2;

  // Document to compare to.
  map<string, bytes> document = 3;
}

// WeightedBody is a message which represents a weighted body text.
message WeightedBody {
  // Body text of query.
  string body = 1;

  // Weight to apply to body text.
  double weight = 2;
}

message Aggregate {
  // Metric records metrics about numeric fields.
  message Metric {
    // Name of the field to record metrics from.
    string field = 1;

    // Enumeration of metric types.
    enum Type {
      // Average field value.
      AVG = 0;
      // Minimum field value.
      MIN = 1;
      // Maximum field value.
      MAX = 2;
      // Sum of all field values.
      SUM = 3;
    }

    // The type of metric to apply.
    Type type = 2;
  }

  // Count records the number of unique values in a field.
  message Count {
    // Name of the field to count values from.
    string field = 1;
  }

  // Bucket records the number of documents which satisfy
  // the Bucket filters.
  message Bucket {
    // Bucket represents documents which satisfy Filter.
    message Bucket {
      // Name of the bucket
      string name = 1;
      // Filter to be satisfied by documents in the bucket.
      Filter filter = 2;
    }
    repeated Bucket buckets = 1;
  }

  oneof aggregater {
    Metric metric = 1;
    Count count = 2;
    Bucket bucket = 3;
  }
}

// Sort defines the ordering of result documents.
message Sort {
  // Field to take values from.
  string field = 1;

  // Order is an enumeration that defines orderings for sorting.
  enum Order {
    // Ascending: from least to greatest, for non-numeric
    // fields this means alphabetical order.
    ASC = 0;

    // Descending: from greatest to least, for non-numeric
    // fields this means reverse-alphabetical order.
    DESC = 1;
  }

  // Sorting order.
  Order order = 2;
}

message Filter {
  // Field is a filter which is applied to a field.
  message Field {
    // Operator is an enumeration of operators
    enum Operator {
      EQUAL_TO = 0;
      DOES_NOT_EQUAL = 1;
      GREATER_THAN = 2;
      GREATER_THAN_OR_EQUAL_TO = 3;
      LESS_THAN = 4;
      LESS_THAN_OR_EQUAL_TO = 5;
      CONTAINS = 6;
      DOES_NOT_CONTAIN = 7;
      ENDS_WITH = 8;
      STARTS_WITH = 9;
    }

    // The operator, which could be a combinator
    Operator operator = 1;

    // Field to take values from.
    string field = 2;

    // Value to match against.
    bytes value = 3;
  }

  // Combinator is a filter which combines other filters.
  message Combinator {
    // Operator is an enumeration of combination operators.
    enum Operator {
      // All of the filters must be satisfied.
      ALL = 0;

      // Any of the filters must be satisfied.
      ANY = 1;

      // One of the filters (and only one) must be satisfied.
      ONE = 2;

      // None of the filters must be satisfied.
      NONE = 3;
    }

    // The operator used to combine filters.
    Operator operator = 1;

    // The filters to combine.
    repeated Filter filters = 2;
  }

  oneof filterer {
    Combinator combinator = 1;
    Field field = 2;
  }
}

message MetaBoost {
  // Filter is a boost which is applied to documents which satisfy the filter.
  message Filter {
    // Filter which must be satisfied by document.
    sajari.engine.query.Filter filter = 1;

    // MetaBoost to apply to matching documents, must be between 0 and 1.
    double value = 2;
  }

  // Add is a MetaBoost wrapper which makes the boost value represent
  // a proportion of the overall score instead of scaling the existing
  // score.
  message Add {
    // MetaBoost to make additive.
    sajari.engine.query.MetaBoost meta_boost = 1;

    // Amount this boost will contribute to the overall score, must be
    // between 0 and 1.
    double value = 2;
  }

  // Geo is a geo-based boost for documents with lat/lng meta fields.
  message Geo {
    // Field containing latitude.
    string field_lat = 1;

    // Field containing longitude.
    string field_lng = 2;

    // Target latitude.
    double lat = 3;

    // Target longitude.
    double lng = 4;

    // Radius of matching border (see region).
    double radius = 5;

    // MetaBoost to apply to matching documents.
    double value = 6;

    // Region is an enumeration that defines regions for geo-boosting.
    enum Region {
      // Inside is used to configure a geo boost to be
      // applied to all points within the radius.
      INSIDE = 0;
      // Outside is used to contigure a geo boost to be
      // applied to all points outside the radius.
      OUTSIDE = 1;
    }

    // Region for matching points.
    Region region = 7;
  }

  // Interval represents a distance-based boosting for search result meta data
  // numeric values.
  message Interval {
    // Point is a pair (point, value) which defines the boost value
    // at a particiular point.  This is then linearly distributed
    // on the values between two coinsecutive points.
    message Point {
      // The point to mark the beginning/end of an interval.
      double point = 1;

      // The amount to boost by at this Point.
      double value = 2;
    }

    // Field with numeric value.
    string field = 1;

    // Points which define intervals (must be at least 2).
    repeated Point points = 2;
  }

  // Distance represents a distnace-based boosting for search result meta data
  // numeric values.
  message Distance {
    // Minium value allowed in distance range.
    double min = 1;

    // Maximum value allowed in distance range.
    double max = 2;

    // Reference value to compare against.
    double ref = 3;

    // Field with numeric value.
    string field = 4;

    // Value to apply to reference distance.
    double value = 5;
  }

  // Element represents an element-based boosting for search result meta data
  // values that are arrays of strings.  Element-based boosting is normalised
  // and so returns a value between 0 and 1.  It is commonly wrapped with an
  // Add boost.
  message Element {
    // Field containing stringArray.
    string field = 1;

    // List of elements to match against.
    repeated string elts = 3;
  }

  // Text represents a text-based boosting for search result meta data which
  // compares the text word-by-word and applies a boost based on the number of
  // common words.  Text-based boosting is normalised and so returns a value
  // between 0 and 1.  It is commonly wrapped with an Add boost.
  message Text {
    // Field containing string data.
    string field = 1;

    // Text to compare against.
    string text = 3;
  }

  oneof meta_booster {
    Add add = 1;
    Filter filter = 2;
    Geo geo = 3;
    Interval interval = 4;
    Distance distance = 5;
    Element element = 6;
    Text text = 7;
  }
}

// IndexBoost represents a boosting which is a applied to instances of terms
// in the index.
message IndexBoost {
  // Field is an index boost which is applied to term instances which originate
  // from the given meta field.
  message Field {
    // Field when term instance was defined.
    string field = 1;

    // Value to boost this terms from this field.
    double value = 2;
  }

  message PosNeg {
    double value = 1;
  }

  oneof index_booster {
    Field field = 1;
    PosNeg pos_neg = 2;
  }
}

message AggregateResponse {
  message Metric {
    double value = 1;
  }

  message Count {
    map<string, int32> counts = 1;
  }

  // Buckets is a full set of buckets computed in an aggregation.
  message Buckets {
    // Bucket is the result of a bucket aggregate.
    message Bucket {
      // Name of bucket.
      string name = 1;
      // Number of documents in the bucket.
      int32 count = 2;
    }
    map<string, Bucket> buckets = 1;
  }

  oneof response {
    Metric metric = 1;
    Count count = 2;
    Buckets buckets = 3;
  }
}

// Response contains all data in response to a search request.
message Response {
  // Number of rev indexes read.
  int64 reads = 1;

  // Total number of results.
  int64 totalResults = 2;

  // Time taken to perform query.
  string time = 3;

  // Aggregates returned by query.
  map<string, AggregateResponse> aggregates = 4;

  // Results returned by query.
  repeated Result results = 5;
}

// Result is a document as represented in a search result.
message Result {
  // Meta data.
  map<string, bytes> meta = 1;

  // Score (normalised) attributed to this document by the query.
  double score = 2;

  // Raw score attributed to this document by the query.
  double raw_score = 3;
}
