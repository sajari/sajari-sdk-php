<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: engine/query/query.proto
//   Date: 2016-09-22 02:37:59

namespace sajari\engine\query\SearchRequest {

  class AggregatesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var \sajari\engine\query\Aggregate */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SearchRequest.AggregatesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Aggregate';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \sajari\engine\query\Aggregate
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \sajari\engine\query\Aggregate $value
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry
     */
    public function setValue(\sajari\engine\query\Aggregate $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class SearchRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Body[]  */
    public $body = array();

    /**  @var \sajari\engine\query\Term[]  */
    public $terms = array();

    /**  @var \sajari\engine\query\Filter */
    public $filter = null;

    /**  @var \sajari\engine\query\FieldBoost[]  */
    public $field_boosts = array();

    /**  @var \sajari\engine\query\InstanceBoost[]  */
    public $instance_boosts = array();

    /**  @var int */
    public $page = null;

    /**  @var int */
    public $results_per_page = null;

    /**  @var string[]  */
    public $fields = array();

    /**  @var \sajari\engine\query\Sort[]  */
    public $sort = array();

    /**  @var \sajari\engine\query\SearchRequest\AggregatesEntry[]  */
    public $aggregates = array();

    /**  @var \sajari\engine\query\Transform[]  */
    public $transforms = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SearchRequest');

      // REPEATED MESSAGE body = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Body';
      $descriptor->addField($f);

      // REPEATED MESSAGE terms = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "terms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Term';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter';
      $descriptor->addField($f);

      // REPEATED MESSAGE field_boosts = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "field_boosts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\FieldBoost';
      $descriptor->addField($f);

      // REPEATED MESSAGE instance_boosts = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "instance_boosts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\InstanceBoost';
      $descriptor->addField($f);

      // OPTIONAL INT32 page = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 results_per_page = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "results_per_page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING fields = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE sort = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "sort";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Sort';
      $descriptor->addField($f);

      // REPEATED MESSAGE aggregates = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "aggregates";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\SearchRequest\AggregatesEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE transforms = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "transforms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Transform';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(1);
    }

    /**
     * Clear <body> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearBody(){
      return $this->_clear(1);
    }

    /**
     * Get <body> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Body
     */
    public function getBody($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <body> value
     *
     * @param \sajari\engine\query\Body $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setBody(\sajari\engine\query\Body $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <body>
     *
     * @return \sajari\engine\query\Body[]
     */
    public function getBodyList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <body>
     *
     * @param \sajari\engine\query\Body $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addBody(\sajari\engine\query\Body $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms(){
      return $this->_has(2);
    }

    /**
     * Clear <terms> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearTerms(){
      return $this->_clear(2);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Term
     */
    public function getTerms($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param \sajari\engine\query\Term $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setTerms(\sajari\engine\query\Term $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return \sajari\engine\query\Term[]
     */
    public function getTermsList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <terms>
     *
     * @param \sajari\engine\query\Term $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addTerms(\sajari\engine\query\Term $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(3);
    }

    /**
     * Clear <filter> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearFilter(){
      return $this->_clear(3);
    }

    /**
     * Get <filter> value
     *
     * @return \sajari\engine\query\Filter
     */
    public function getFilter(){
      return $this->_get(3);
    }

    /**
     * Set <filter> value
     *
     * @param \sajari\engine\query\Filter $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setFilter(\sajari\engine\query\Filter $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <field_boosts> has a value
     *
     * @return boolean
     */
    public function hasFieldBoosts(){
      return $this->_has(4);
    }

    /**
     * Clear <field_boosts> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearFieldBoosts(){
      return $this->_clear(4);
    }

    /**
     * Get <field_boosts> value
     *
     * @param int $idx
     * @return \sajari\engine\query\FieldBoost
     */
    public function getFieldBoosts($idx = NULL){
      return $this->_get(4, $idx);
    }

    /**
     * Set <field_boosts> value
     *
     * @param \sajari\engine\query\FieldBoost $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setFieldBoosts(\sajari\engine\query\FieldBoost $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <field_boosts>
     *
     * @return \sajari\engine\query\FieldBoost[]
     */
    public function getFieldBoostsList(){
     return $this->_get(4);
    }

    /**
     * Add a new element to <field_boosts>
     *
     * @param \sajari\engine\query\FieldBoost $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addFieldBoosts(\sajari\engine\query\FieldBoost $value){
     return $this->_add(4, $value);
    }

    /**
     * Check if <instance_boosts> has a value
     *
     * @return boolean
     */
    public function hasInstanceBoosts(){
      return $this->_has(5);
    }

    /**
     * Clear <instance_boosts> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearInstanceBoosts(){
      return $this->_clear(5);
    }

    /**
     * Get <instance_boosts> value
     *
     * @param int $idx
     * @return \sajari\engine\query\InstanceBoost
     */
    public function getInstanceBoosts($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <instance_boosts> value
     *
     * @param \sajari\engine\query\InstanceBoost $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setInstanceBoosts(\sajari\engine\query\InstanceBoost $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <instance_boosts>
     *
     * @return \sajari\engine\query\InstanceBoost[]
     */
    public function getInstanceBoostsList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <instance_boosts>
     *
     * @param \sajari\engine\query\InstanceBoost $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addInstanceBoosts(\sajari\engine\query\InstanceBoost $value){
     return $this->_add(5, $value);
    }

    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(6);
    }

    /**
     * Clear <page> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearPage(){
      return $this->_clear(6);
    }

    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(6);
    }

    /**
     * Set <page> value
     *
     * @param int $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setPage( $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <results_per_page> has a value
     *
     * @return boolean
     */
    public function hasResultsPerPage(){
      return $this->_has(7);
    }

    /**
     * Clear <results_per_page> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearResultsPerPage(){
      return $this->_clear(7);
    }

    /**
     * Get <results_per_page> value
     *
     * @return int
     */
    public function getResultsPerPage(){
      return $this->_get(7);
    }

    /**
     * Set <results_per_page> value
     *
     * @param int $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setResultsPerPage( $value){
      return $this->_set(7, $value);
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(8);
    }

    /**
     * Clear <fields> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearFields(){
      return $this->_clear(8);
    }

    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return string
     */
    public function getFields($idx = NULL){
      return $this->_get(8, $idx);
    }

    /**
     * Set <fields> value
     *
     * @param string $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setFields( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }

    /**
     * Get all elements of <fields>
     *
     * @return string[]
     */
    public function getFieldsList(){
     return $this->_get(8);
    }

    /**
     * Add a new element to <fields>
     *
     * @param string $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addFields( $value){
     return $this->_add(8, $value);
    }

    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort(){
      return $this->_has(9);
    }

    /**
     * Clear <sort> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearSort(){
      return $this->_clear(9);
    }

    /**
     * Get <sort> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Sort
     */
    public function getSort($idx = NULL){
      return $this->_get(9, $idx);
    }

    /**
     * Set <sort> value
     *
     * @param \sajari\engine\query\Sort $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setSort(\sajari\engine\query\Sort $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }

    /**
     * Get all elements of <sort>
     *
     * @return \sajari\engine\query\Sort[]
     */
    public function getSortList(){
     return $this->_get(9);
    }

    /**
     * Add a new element to <sort>
     *
     * @param \sajari\engine\query\Sort $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addSort(\sajari\engine\query\Sort $value){
     return $this->_add(9, $value);
    }

    /**
     * Check if <aggregates> has a value
     *
     * @return boolean
     */
    public function hasAggregates(){
      return $this->_has(10);
    }

    /**
     * Clear <aggregates> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearAggregates(){
      return $this->_clear(10);
    }

    /**
     * Get <aggregates> value
     *
     * @param int $idx
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry
     */
    public function getAggregates($idx = NULL){
      return $this->_get(10, $idx);
    }

    /**
     * Set <aggregates> value
     *
     * @param \sajari\engine\query\SearchRequest\AggregatesEntry $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setAggregates(\sajari\engine\query\SearchRequest\AggregatesEntry $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }

    /**
     * Get all elements of <aggregates>
     *
     * @return \sajari\engine\query\SearchRequest\AggregatesEntry[]
     */
    public function getAggregatesList(){
     return $this->_get(10);
    }

    /**
     * Add a new element to <aggregates>
     *
     * @param \sajari\engine\query\SearchRequest\AggregatesEntry $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addAggregates(\sajari\engine\query\SearchRequest\AggregatesEntry $value){
     return $this->_add(10, $value);
    }

    /**
     * Check if <transforms> has a value
     *
     * @return boolean
     */
    public function hasTransforms(){
      return $this->_has(11);
    }

    /**
     * Clear <transforms> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function clearTransforms(){
      return $this->_clear(11);
    }

    /**
     * Get <transforms> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Transform
     */
    public function getTransforms($idx = NULL){
      return $this->_get(11, $idx);
    }

    /**
     * Set <transforms> value
     *
     * @param \sajari\engine\query\Transform $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function setTransforms(\sajari\engine\query\Transform $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }

    /**
     * Get all elements of <transforms>
     *
     * @return \sajari\engine\query\Transform[]
     */
    public function getTransformsList(){
     return $this->_get(11);
    }

    /**
     * Add a new element to <transforms>
     *
     * @param \sajari\engine\query\Transform $value
     * @return \sajari\engine\query\SearchRequest
     */
    public function addTransforms(\sajari\engine\query\Transform $value){
     return $this->_add(11, $value);
    }
  }
}

namespace sajari\engine\query {

  class Transform extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Transform');

      // OPTIONAL STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(1);
    }

    /**
     * Clear <identifier> value
     *
     * @return \sajari\engine\query\Transform
     */
    public function clearIdentifier(){
      return $this->_clear(1);
    }

    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(1);
    }

    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \sajari\engine\query\Transform
     */
    public function setIdentifier( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\query {

  class Term extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;

    /**  @var string */
    public $field = null;

    /**  @var int */
    public $pos = null;

    /**  @var int */
    public $neg = null;

    /**  @var float */
    public $weight = null;

    /**  @var int */
    public $word_offset = null;

    /**  @var int */
    public $para_offset = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Term');

      // OPTIONAL STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pos = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 neg = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "neg";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE weight = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "weight";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 word_offset = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "word_offset";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 para_offset = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "para_offset";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearValue(){
      return $this->_clear(1);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\query\Term
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearField(){
      return $this->_clear(2);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(2);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\Term
     */
    public function setField( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(3);
    }

    /**
     * Clear <pos> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearPos(){
      return $this->_clear(3);
    }

    /**
     * Get <pos> value
     *
     * @return int
     */
    public function getPos(){
      return $this->_get(3);
    }

    /**
     * Set <pos> value
     *
     * @param int $value
     * @return \sajari\engine\query\Term
     */
    public function setPos( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <neg> has a value
     *
     * @return boolean
     */
    public function hasNeg(){
      return $this->_has(4);
    }

    /**
     * Clear <neg> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearNeg(){
      return $this->_clear(4);
    }

    /**
     * Get <neg> value
     *
     * @return int
     */
    public function getNeg(){
      return $this->_get(4);
    }

    /**
     * Set <neg> value
     *
     * @param int $value
     * @return \sajari\engine\query\Term
     */
    public function setNeg( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <weight> has a value
     *
     * @return boolean
     */
    public function hasWeight(){
      return $this->_has(5);
    }

    /**
     * Clear <weight> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearWeight(){
      return $this->_clear(5);
    }

    /**
     * Get <weight> value
     *
     * @return float
     */
    public function getWeight(){
      return $this->_get(5);
    }

    /**
     * Set <weight> value
     *
     * @param float $value
     * @return \sajari\engine\query\Term
     */
    public function setWeight( $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <word_offset> has a value
     *
     * @return boolean
     */
    public function hasWordOffset(){
      return $this->_has(6);
    }

    /**
     * Clear <word_offset> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearWordOffset(){
      return $this->_clear(6);
    }

    /**
     * Get <word_offset> value
     *
     * @return int
     */
    public function getWordOffset(){
      return $this->_get(6);
    }

    /**
     * Set <word_offset> value
     *
     * @param int $value
     * @return \sajari\engine\query\Term
     */
    public function setWordOffset( $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <para_offset> has a value
     *
     * @return boolean
     */
    public function hasParaOffset(){
      return $this->_has(7);
    }

    /**
     * Clear <para_offset> value
     *
     * @return \sajari\engine\query\Term
     */
    public function clearParaOffset(){
      return $this->_clear(7);
    }

    /**
     * Get <para_offset> value
     *
     * @return int
     */
    public function getParaOffset(){
      return $this->_get(7);
    }

    /**
     * Set <para_offset> value
     *
     * @param int $value
     * @return \sajari\engine\query\Term
     */
    public function setParaOffset( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sajari\engine\query\EvaluateRequest {

  class DocumentEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var string */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.EvaluateRequest.DocumentEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class EvaluateRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\SearchRequest */
    public $search_request = null;

    /**  @var \sajari\engine\query\EvaluateRequest\DocumentEntry[]  */
    public $document = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.EvaluateRequest');

      // OPTIONAL MESSAGE search_request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "search_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\SearchRequest';
      $descriptor->addField($f);

      // REPEATED MESSAGE document = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\EvaluateRequest\DocumentEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <search_request> has a value
     *
     * @return boolean
     */
    public function hasSearchRequest(){
      return $this->_has(1);
    }

    /**
     * Clear <search_request> value
     *
     * @return \sajari\engine\query\EvaluateRequest
     */
    public function clearSearchRequest(){
      return $this->_clear(1);
    }

    /**
     * Get <search_request> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function getSearchRequest(){
      return $this->_get(1);
    }

    /**
     * Set <search_request> value
     *
     * @param \sajari\engine\query\SearchRequest $value
     * @return \sajari\engine\query\EvaluateRequest
     */
    public function setSearchRequest(\sajari\engine\query\SearchRequest $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(2);
    }

    /**
     * Clear <document> value
     *
     * @return \sajari\engine\query\EvaluateRequest
     */
    public function clearDocument(){
      return $this->_clear(2);
    }

    /**
     * Get <document> value
     *
     * @param int $idx
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry
     */
    public function getDocument($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <document> value
     *
     * @param \sajari\engine\query\EvaluateRequest\DocumentEntry $value
     * @return \sajari\engine\query\EvaluateRequest
     */
    public function setDocument(\sajari\engine\query\EvaluateRequest\DocumentEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <document>
     *
     * @return \sajari\engine\query\EvaluateRequest\DocumentEntry[]
     */
    public function getDocumentList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <document>
     *
     * @param \sajari\engine\query\EvaluateRequest\DocumentEntry $value
     * @return \sajari\engine\query\EvaluateRequest
     */
    public function addDocument(\sajari\engine\query\EvaluateRequest\DocumentEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query\SubstituteRequest {

  class DocumentEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var string */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SubstituteRequest.DocumentEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class SubstituteRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\SearchRequest */
    public $search_request = null;

    /**  @var \sajari\engine\query\SubstituteRequest\DocumentEntry[]  */
    public $document = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SubstituteRequest');

      // OPTIONAL MESSAGE search_request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "search_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\SearchRequest';
      $descriptor->addField($f);

      // REPEATED MESSAGE document = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\SubstituteRequest\DocumentEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <search_request> has a value
     *
     * @return boolean
     */
    public function hasSearchRequest(){
      return $this->_has(1);
    }

    /**
     * Clear <search_request> value
     *
     * @return \sajari\engine\query\SubstituteRequest
     */
    public function clearSearchRequest(){
      return $this->_clear(1);
    }

    /**
     * Get <search_request> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function getSearchRequest(){
      return $this->_get(1);
    }

    /**
     * Set <search_request> value
     *
     * @param \sajari\engine\query\SearchRequest $value
     * @return \sajari\engine\query\SubstituteRequest
     */
    public function setSearchRequest(\sajari\engine\query\SearchRequest $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(2);
    }

    /**
     * Clear <document> value
     *
     * @return \sajari\engine\query\SubstituteRequest
     */
    public function clearDocument(){
      return $this->_clear(2);
    }

    /**
     * Get <document> value
     *
     * @param int $idx
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry
     */
    public function getDocument($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <document> value
     *
     * @param \sajari\engine\query\SubstituteRequest\DocumentEntry $value
     * @return \sajari\engine\query\SubstituteRequest
     */
    public function setDocument(\sajari\engine\query\SubstituteRequest\DocumentEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <document>
     *
     * @return \sajari\engine\query\SubstituteRequest\DocumentEntry[]
     */
    public function getDocumentList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <document>
     *
     * @param \sajari\engine\query\SubstituteRequest\DocumentEntry $value
     * @return \sajari\engine\query\SubstituteRequest
     */
    public function addDocument(\sajari\engine\query\SubstituteRequest\DocumentEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class Body extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $text = null;

    /**  @var float */
    public $weight = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Body');

      // OPTIONAL STRING text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE weight = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "weight";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }

    /**
     * Clear <text> value
     *
     * @return \sajari\engine\query\Body
     */
    public function clearText(){
      return $this->_clear(1);
    }

    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(1);
    }

    /**
     * Set <text> value
     *
     * @param string $value
     * @return \sajari\engine\query\Body
     */
    public function setText( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <weight> has a value
     *
     * @return boolean
     */
    public function hasWeight(){
      return $this->_has(2);
    }

    /**
     * Clear <weight> value
     *
     * @return \sajari\engine\query\Body
     */
    public function clearWeight(){
      return $this->_clear(2);
    }

    /**
     * Get <weight> value
     *
     * @return float
     */
    public function getWeight(){
      return $this->_get(2);
    }

    /**
     * Set <weight> value
     *
     * @param float $value
     * @return \sajari\engine\query\Body
     */
    public function setWeight( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\Aggregate\Metric {

  class Type extends \DrSlump\Protobuf\Enum {
    const AVG = 0;
    const MIN = 1;
    const MAX = 2;
    const SUM = 3;
  }
}
namespace sajari\engine\query\Aggregate {

  class Metric extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var int - \sajari\engine\query\Aggregate\Metric\Type */
    public $type = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Aggregate.Metric');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Aggregate\Metric\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Aggregate\Metric
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\Aggregate\Metric
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }

    /**
     * Clear <type> value
     *
     * @return \sajari\engine\query\Aggregate\Metric
     */
    public function clearType(){
      return $this->_clear(2);
    }

    /**
     * Get <type> value
     *
     * @return int - \sajari\engine\query\Aggregate\Metric\Type
     */
    public function getType(){
      return $this->_get(2);
    }

    /**
     * Set <type> value
     *
     * @param int - \sajari\engine\query\Aggregate\Metric\Type $value
     * @return \sajari\engine\query\Aggregate\Metric
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\Aggregate {

  class Count extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Aggregate.Count');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Aggregate\Count
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\Aggregate\Count
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\query\Aggregate\Bucket {

  class Bucket extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;

    /**  @var \sajari\engine\query\Filter */
    public $filter = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Aggregate.Bucket.Bucket');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket
     */
    public function clearName(){
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }

    /**
     * Clear <filter> value
     *
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket
     */
    public function clearFilter(){
      return $this->_clear(2);
    }

    /**
     * Get <filter> value
     *
     * @return \sajari\engine\query\Filter
     */
    public function getFilter(){
      return $this->_get(2);
    }

    /**
     * Set <filter> value
     *
     * @param \sajari\engine\query\Filter $value
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket
     */
    public function setFilter(\sajari\engine\query\Filter $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\Aggregate {

  class Bucket extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Aggregate\Bucket\Bucket[]  */
    public $buckets = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Aggregate.Bucket');

      // REPEATED MESSAGE buckets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Aggregate\Bucket\Bucket';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(1);
    }

    /**
     * Clear <buckets> value
     *
     * @return \sajari\engine\query\Aggregate\Bucket
     */
    public function clearBuckets(){
      return $this->_clear(1);
    }

    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket
     */
    public function getBuckets($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <buckets> value
     *
     * @param \sajari\engine\query\Aggregate\Bucket\Bucket $value
     * @return \sajari\engine\query\Aggregate\Bucket
     */
    public function setBuckets(\sajari\engine\query\Aggregate\Bucket\Bucket $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <buckets>
     *
     * @return \sajari\engine\query\Aggregate\Bucket\Bucket[]
     */
    public function getBucketsList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <buckets>
     *
     * @param \sajari\engine\query\Aggregate\Bucket\Bucket $value
     * @return \sajari\engine\query\Aggregate\Bucket
     */
    public function addBuckets(\sajari\engine\query\Aggregate\Bucket\Bucket $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\query {

  class Aggregate extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Aggregate\Metric */
    public $metric = null;

    /**  @var \sajari\engine\query\Aggregate\Count */
    public $count = null;

    /**  @var \sajari\engine\query\Aggregate\Bucket */
    public $bucket = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Aggregate');

      // OPTIONAL MESSAGE metric = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "metric";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Aggregate\Metric';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Aggregate\Count';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE bucket = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Aggregate\Bucket';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <metric> has a value
     *
     * @return boolean
     */
    public function hasMetric(){
      return $this->_has(1);
    }

    /**
     * Clear <metric> value
     *
     * @return \sajari\engine\query\Aggregate
     */
    public function clearMetric(){
      return $this->_clear(1);
    }

    /**
     * Get <metric> value
     *
     * @return \sajari\engine\query\Aggregate\Metric
     */
    public function getMetric(){
      return $this->_get(1);
    }

    /**
     * Set <metric> value
     *
     * @param \sajari\engine\query\Aggregate\Metric $value
     * @return \sajari\engine\query\Aggregate
     */
    public function setMetric(\sajari\engine\query\Aggregate\Metric $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }

    /**
     * Clear <count> value
     *
     * @return \sajari\engine\query\Aggregate
     */
    public function clearCount(){
      return $this->_clear(2);
    }

    /**
     * Get <count> value
     *
     * @return \sajari\engine\query\Aggregate\Count
     */
    public function getCount(){
      return $this->_get(2);
    }

    /**
     * Set <count> value
     *
     * @param \sajari\engine\query\Aggregate\Count $value
     * @return \sajari\engine\query\Aggregate
     */
    public function setCount(\sajari\engine\query\Aggregate\Count $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(3);
    }

    /**
     * Clear <bucket> value
     *
     * @return \sajari\engine\query\Aggregate
     */
    public function clearBucket(){
      return $this->_clear(3);
    }

    /**
     * Get <bucket> value
     *
     * @return \sajari\engine\query\Aggregate\Bucket
     */
    public function getBucket(){
      return $this->_get(3);
    }

    /**
     * Set <bucket> value
     *
     * @param \sajari\engine\query\Aggregate\Bucket $value
     * @return \sajari\engine\query\Aggregate
     */
    public function setBucket(\sajari\engine\query\Aggregate\Bucket $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\query\Sort {

  class Order extends \DrSlump\Protobuf\Enum {
    const ASC = 0;
    const DESC = 1;
  }
}
namespace sajari\engine\query {

  class Sort extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var int - \sajari\engine\query\Sort\Order */
    public $order = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Sort');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM order = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "order";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Sort\Order';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Sort
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\Sort
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(2);
    }

    /**
     * Clear <order> value
     *
     * @return \sajari\engine\query\Sort
     */
    public function clearOrder(){
      return $this->_clear(2);
    }

    /**
     * Get <order> value
     *
     * @return int - \sajari\engine\query\Sort\Order
     */
    public function getOrder(){
      return $this->_get(2);
    }

    /**
     * Set <order> value
     *
     * @param int - \sajari\engine\query\Sort\Order $value
     * @return \sajari\engine\query\Sort
     */
    public function setOrder( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\Filter\Field {

  class Operator extends \DrSlump\Protobuf\Enum {
    const EQUAL_TO = 0;
    const NOT_EQUAL_TO = 1;
    const GREATER_THAN = 2;
    const GREATER_THAN_OR_EQUAL_TO = 3;
    const LESS_THAN = 4;
    const LESS_THAN_OR_EQUAL_TO = 5;
    const CONTAINS = 6;
    const DOES_NOT_CONTAIN = 7;
    const HAS_SUFFIX = 8;
    const HAS_PREFIX = 9;
  }
}
namespace sajari\engine\query\Filter {

  class Field extends \DrSlump\Protobuf\Message {

    /**  @var int - \sajari\engine\query\Filter\Field\Operator */
    public $operator = null;

    /**  @var string */
    public $field = null;

    /**  @var \sajari\engine\Value */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Filter.Field');

      // OPTIONAL ENUM operator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter\Field\Operator';
      $descriptor->addField($f);

      // OPTIONAL STRING field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(1);
    }

    /**
     * Clear <operator> value
     *
     * @return \sajari\engine\query\Filter\Field
     */
    public function clearOperator(){
      return $this->_clear(1);
    }

    /**
     * Get <operator> value
     *
     * @return int - \sajari\engine\query\Filter\Field\Operator
     */
    public function getOperator(){
      return $this->_get(1);
    }

    /**
     * Set <operator> value
     *
     * @param int - \sajari\engine\query\Filter\Field\Operator $value
     * @return \sajari\engine\query\Filter\Field
     */
    public function setOperator( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Filter\Field
     */
    public function clearField(){
      return $this->_clear(2);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(2);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\Filter\Field
     */
    public function setField( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\Filter\Field
     */
    public function clearValue(){
      return $this->_clear(3);
    }

    /**
     * Get <value> value
     *
     * @return \sajari\engine\Value
     */
    public function getValue(){
      return $this->_get(3);
    }

    /**
     * Set <value> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\query\Filter\Field
     */
    public function setValue(\sajari\engine\Value $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\query\Filter\Combinator {

  class Operator extends \DrSlump\Protobuf\Enum {
    const ALL = 0;
    const ANY = 1;
    const ONE = 2;
    const NONE = 3;
  }
}
namespace sajari\engine\query\Filter {

  class Combinator extends \DrSlump\Protobuf\Message {

    /**  @var int - \sajari\engine\query\Filter\Combinator\Operator */
    public $operator = null;

    /**  @var \sajari\engine\query\Filter[]  */
    public $filters = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Filter.Combinator');

      // OPTIONAL ENUM operator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter\Combinator\Operator';
      $descriptor->addField($f);

      // REPEATED MESSAGE filters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Filter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(1);
    }

    /**
     * Clear <operator> value
     *
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function clearOperator(){
      return $this->_clear(1);
    }

    /**
     * Get <operator> value
     *
     * @return int - \sajari\engine\query\Filter\Combinator\Operator
     */
    public function getOperator(){
      return $this->_get(1);
    }

    /**
     * Set <operator> value
     *
     * @param int - \sajari\engine\query\Filter\Combinator\Operator $value
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function setOperator( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(2);
    }

    /**
     * Clear <filters> value
     *
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function clearFilters(){
      return $this->_clear(2);
    }

    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Filter
     */
    public function getFilters($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <filters> value
     *
     * @param \sajari\engine\query\Filter $value
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function setFilters(\sajari\engine\query\Filter $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <filters>
     *
     * @return \sajari\engine\query\Filter[]
     */
    public function getFiltersList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <filters>
     *
     * @param \sajari\engine\query\Filter $value
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function addFilters(\sajari\engine\query\Filter $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class Filter extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Filter\Combinator */
    public $combinator = null;

    /**  @var \sajari\engine\query\Filter\Field */
    public $field = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Filter');

      // OPTIONAL MESSAGE combinator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "combinator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter\Combinator';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter\Field';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <combinator> has a value
     *
     * @return boolean
     */
    public function hasCombinator(){
      return $this->_has(1);
    }

    /**
     * Clear <combinator> value
     *
     * @return \sajari\engine\query\Filter
     */
    public function clearCombinator(){
      return $this->_clear(1);
    }

    /**
     * Get <combinator> value
     *
     * @return \sajari\engine\query\Filter\Combinator
     */
    public function getCombinator(){
      return $this->_get(1);
    }

    /**
     * Set <combinator> value
     *
     * @param \sajari\engine\query\Filter\Combinator $value
     * @return \sajari\engine\query\Filter
     */
    public function setCombinator(\sajari\engine\query\Filter\Combinator $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\Filter
     */
    public function clearField(){
      return $this->_clear(2);
    }

    /**
     * Get <field> value
     *
     * @return \sajari\engine\query\Filter\Field
     */
    public function getField(){
      return $this->_get(2);
    }

    /**
     * Set <field> value
     *
     * @param \sajari\engine\query\Filter\Field $value
     * @return \sajari\engine\query\Filter
     */
    public function setField(\sajari\engine\query\Filter\Field $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Filter extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Filter */
    public $filter = null;

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Filter');

      // OPTIONAL MESSAGE filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\Filter';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(1);
    }

    /**
     * Clear <filter> value
     *
     * @return \sajari\engine\query\FieldBoost\Filter
     */
    public function clearFilter(){
      return $this->_clear(1);
    }

    /**
     * Get <filter> value
     *
     * @return \sajari\engine\query\Filter
     */
    public function getFilter(){
      return $this->_get(1);
    }

    /**
     * Set <filter> value
     *
     * @param \sajari\engine\query\Filter $value
     * @return \sajari\engine\query\FieldBoost\Filter
     */
    public function setFilter(\sajari\engine\query\Filter $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\FieldBoost\Filter
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Filter
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Add extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\FieldBoost */
    public $field_boost = null;

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Add');

      // OPTIONAL MESSAGE field_boost = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_boost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_boost> has a value
     *
     * @return boolean
     */
    public function hasFieldBoost(){
      return $this->_has(1);
    }

    /**
     * Clear <field_boost> value
     *
     * @return \sajari\engine\query\FieldBoost\Add
     */
    public function clearFieldBoost(){
      return $this->_clear(1);
    }

    /**
     * Get <field_boost> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function getFieldBoost(){
      return $this->_get(1);
    }

    /**
     * Set <field_boost> value
     *
     * @param \sajari\engine\query\FieldBoost $value
     * @return \sajari\engine\query\FieldBoost\Add
     */
    public function setFieldBoost(\sajari\engine\query\FieldBoost $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\FieldBoost\Add
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Add
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost\Geo {

  class Region extends \DrSlump\Protobuf\Enum {
    const INSIDE = 0;
    const OUTSIDE = 1;
  }
}
namespace sajari\engine\query\FieldBoost {

  class Geo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_lat = null;

    /**  @var string */
    public $field_lng = null;

    /**  @var float */
    public $lat = null;

    /**  @var float */
    public $lng = null;

    /**  @var float */
    public $radius = null;

    /**  @var float */
    public $value = null;

    /**  @var int - \sajari\engine\query\FieldBoost\Geo\Region */
    public $region = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Geo');

      // OPTIONAL STRING field_lat = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_lat";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING field_lng = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field_lng";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE lat = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lat";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE lng = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lng";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE radius = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "radius";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM region = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Geo\Region';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_lat> has a value
     *
     * @return boolean
     */
    public function hasFieldLat(){
      return $this->_has(1);
    }

    /**
     * Clear <field_lat> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearFieldLat(){
      return $this->_clear(1);
    }

    /**
     * Get <field_lat> value
     *
     * @return string
     */
    public function getFieldLat(){
      return $this->_get(1);
    }

    /**
     * Set <field_lat> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setFieldLat( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <field_lng> has a value
     *
     * @return boolean
     */
    public function hasFieldLng(){
      return $this->_has(2);
    }

    /**
     * Clear <field_lng> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearFieldLng(){
      return $this->_clear(2);
    }

    /**
     * Get <field_lng> value
     *
     * @return string
     */
    public function getFieldLng(){
      return $this->_get(2);
    }

    /**
     * Set <field_lng> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setFieldLng( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <lat> has a value
     *
     * @return boolean
     */
    public function hasLat(){
      return $this->_has(3);
    }

    /**
     * Clear <lat> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearLat(){
      return $this->_clear(3);
    }

    /**
     * Get <lat> value
     *
     * @return float
     */
    public function getLat(){
      return $this->_get(3);
    }

    /**
     * Set <lat> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setLat( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <lng> has a value
     *
     * @return boolean
     */
    public function hasLng(){
      return $this->_has(4);
    }

    /**
     * Clear <lng> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearLng(){
      return $this->_clear(4);
    }

    /**
     * Get <lng> value
     *
     * @return float
     */
    public function getLng(){
      return $this->_get(4);
    }

    /**
     * Set <lng> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setLng( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <radius> has a value
     *
     * @return boolean
     */
    public function hasRadius(){
      return $this->_has(5);
    }

    /**
     * Clear <radius> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearRadius(){
      return $this->_clear(5);
    }

    /**
     * Get <radius> value
     *
     * @return float
     */
    public function getRadius(){
      return $this->_get(5);
    }

    /**
     * Set <radius> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setRadius( $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(6);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearValue(){
      return $this->_clear(6);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(6);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setValue( $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(7);
    }

    /**
     * Clear <region> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function clearRegion(){
      return $this->_clear(7);
    }

    /**
     * Get <region> value
     *
     * @return int - \sajari\engine\query\FieldBoost\Geo\Region
     */
    public function getRegion(){
      return $this->_get(7);
    }

    /**
     * Set <region> value
     *
     * @param int - \sajari\engine\query\FieldBoost\Geo\Region $value
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function setRegion( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost\Interval {

  class Point extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $point = null;

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Interval.Point');

      // OPTIONAL DOUBLE point = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(1);
    }

    /**
     * Clear <point> value
     *
     * @return \sajari\engine\query\FieldBoost\Interval\Point
     */
    public function clearPoint(){
      return $this->_clear(1);
    }

    /**
     * Get <point> value
     *
     * @return float
     */
    public function getPoint(){
      return $this->_get(1);
    }

    /**
     * Set <point> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Interval\Point
     */
    public function setPoint( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\FieldBoost\Interval\Point
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Interval\Point
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Interval extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var \sajari\engine\query\FieldBoost\Interval\Point[]  */
    public $points = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Interval');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE points = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "points";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\FieldBoost\Interval\Point';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <points> has a value
     *
     * @return boolean
     */
    public function hasPoints(){
      return $this->_has(2);
    }

    /**
     * Clear <points> value
     *
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function clearPoints(){
      return $this->_clear(2);
    }

    /**
     * Get <points> value
     *
     * @param int $idx
     * @return \sajari\engine\query\FieldBoost\Interval\Point
     */
    public function getPoints($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <points> value
     *
     * @param \sajari\engine\query\FieldBoost\Interval\Point $value
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function setPoints(\sajari\engine\query\FieldBoost\Interval\Point $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <points>
     *
     * @return \sajari\engine\query\FieldBoost\Interval\Point[]
     */
    public function getPointsList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <points>
     *
     * @param \sajari\engine\query\FieldBoost\Interval\Point $value
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function addPoints(\sajari\engine\query\FieldBoost\Interval\Point $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Distance extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $min = null;

    /**  @var float */
    public $max = null;

    /**  @var float */
    public $ref = null;

    /**  @var string */
    public $field = null;

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Distance');

      // OPTIONAL DOUBLE min = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "min";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE max = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE ref = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ref";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING field = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin(){
      return $this->_has(1);
    }

    /**
     * Clear <min> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function clearMin(){
      return $this->_clear(1);
    }

    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin(){
      return $this->_get(1);
    }

    /**
     * Set <min> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function setMin( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax(){
      return $this->_has(2);
    }

    /**
     * Clear <max> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function clearMax(){
      return $this->_clear(2);
    }

    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax(){
      return $this->_get(2);
    }

    /**
     * Set <max> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function setMax( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <ref> has a value
     *
     * @return boolean
     */
    public function hasRef(){
      return $this->_has(3);
    }

    /**
     * Clear <ref> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function clearRef(){
      return $this->_clear(3);
    }

    /**
     * Get <ref> value
     *
     * @return float
     */
    public function getRef(){
      return $this->_get(3);
    }

    /**
     * Set <ref> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function setRef( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(4);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function clearField(){
      return $this->_clear(4);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(4);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function setField( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(5);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function clearValue(){
      return $this->_clear(5);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(5);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function setValue( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Element extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var string[]  */
    public $elts = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Element');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING elts = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "elts";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <elts> has a value
     *
     * @return boolean
     */
    public function hasElts(){
      return $this->_has(3);
    }

    /**
     * Clear <elts> value
     *
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function clearElts(){
      return $this->_clear(3);
    }

    /**
     * Get <elts> value
     *
     * @param int $idx
     * @return string
     */
    public function getElts($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <elts> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function setElts( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <elts>
     *
     * @return string[]
     */
    public function getEltsList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <elts>
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function addElts( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace sajari\engine\query\FieldBoost {

  class Text extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var string */
    public $text = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost.Text');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\FieldBoost\Text
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Text
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(3);
    }

    /**
     * Clear <text> value
     *
     * @return \sajari\engine\query\FieldBoost\Text
     */
    public function clearText(){
      return $this->_clear(3);
    }

    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(3);
    }

    /**
     * Set <text> value
     *
     * @param string $value
     * @return \sajari\engine\query\FieldBoost\Text
     */
    public function setText( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\query {

  class FieldBoost extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\FieldBoost\Add */
    public $add = null;

    /**  @var \sajari\engine\query\FieldBoost\Filter */
    public $filter = null;

    /**  @var \sajari\engine\query\FieldBoost\Geo */
    public $geo = null;

    /**  @var \sajari\engine\query\FieldBoost\Interval */
    public $interval = null;

    /**  @var \sajari\engine\query\FieldBoost\Distance */
    public $distance = null;

    /**  @var \sajari\engine\query\FieldBoost\Element */
    public $element = null;

    /**  @var \sajari\engine\query\FieldBoost\Text */
    public $text = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.FieldBoost');

      // OPTIONAL MESSAGE add = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "add";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Add';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Filter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE geo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "geo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Geo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE interval = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "interval";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Interval';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE distance = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "distance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Distance';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE element = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "element";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Element';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE text = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\FieldBoost\Text';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <add> has a value
     *
     * @return boolean
     */
    public function hasAdd(){
      return $this->_has(1);
    }

    /**
     * Clear <add> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearAdd(){
      return $this->_clear(1);
    }

    /**
     * Get <add> value
     *
     * @return \sajari\engine\query\FieldBoost\Add
     */
    public function getAdd(){
      return $this->_get(1);
    }

    /**
     * Set <add> value
     *
     * @param \sajari\engine\query\FieldBoost\Add $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setAdd(\sajari\engine\query\FieldBoost\Add $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }

    /**
     * Clear <filter> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearFilter(){
      return $this->_clear(2);
    }

    /**
     * Get <filter> value
     *
     * @return \sajari\engine\query\FieldBoost\Filter
     */
    public function getFilter(){
      return $this->_get(2);
    }

    /**
     * Set <filter> value
     *
     * @param \sajari\engine\query\FieldBoost\Filter $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setFilter(\sajari\engine\query\FieldBoost\Filter $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <geo> has a value
     *
     * @return boolean
     */
    public function hasGeo(){
      return $this->_has(3);
    }

    /**
     * Clear <geo> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearGeo(){
      return $this->_clear(3);
    }

    /**
     * Get <geo> value
     *
     * @return \sajari\engine\query\FieldBoost\Geo
     */
    public function getGeo(){
      return $this->_get(3);
    }

    /**
     * Set <geo> value
     *
     * @param \sajari\engine\query\FieldBoost\Geo $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setGeo(\sajari\engine\query\FieldBoost\Geo $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <interval> has a value
     *
     * @return boolean
     */
    public function hasInterval(){
      return $this->_has(4);
    }

    /**
     * Clear <interval> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearInterval(){
      return $this->_clear(4);
    }

    /**
     * Get <interval> value
     *
     * @return \sajari\engine\query\FieldBoost\Interval
     */
    public function getInterval(){
      return $this->_get(4);
    }

    /**
     * Set <interval> value
     *
     * @param \sajari\engine\query\FieldBoost\Interval $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setInterval(\sajari\engine\query\FieldBoost\Interval $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <distance> has a value
     *
     * @return boolean
     */
    public function hasDistance(){
      return $this->_has(5);
    }

    /**
     * Clear <distance> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearDistance(){
      return $this->_clear(5);
    }

    /**
     * Get <distance> value
     *
     * @return \sajari\engine\query\FieldBoost\Distance
     */
    public function getDistance(){
      return $this->_get(5);
    }

    /**
     * Set <distance> value
     *
     * @param \sajari\engine\query\FieldBoost\Distance $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setDistance(\sajari\engine\query\FieldBoost\Distance $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <element> has a value
     *
     * @return boolean
     */
    public function hasElement(){
      return $this->_has(6);
    }

    /**
     * Clear <element> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearElement(){
      return $this->_clear(6);
    }

    /**
     * Get <element> value
     *
     * @return \sajari\engine\query\FieldBoost\Element
     */
    public function getElement(){
      return $this->_get(6);
    }

    /**
     * Set <element> value
     *
     * @param \sajari\engine\query\FieldBoost\Element $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setElement(\sajari\engine\query\FieldBoost\Element $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(7);
    }

    /**
     * Clear <text> value
     *
     * @return \sajari\engine\query\FieldBoost
     */
    public function clearText(){
      return $this->_clear(7);
    }

    /**
     * Get <text> value
     *
     * @return \sajari\engine\query\FieldBoost\Text
     */
    public function getText(){
      return $this->_get(7);
    }

    /**
     * Set <text> value
     *
     * @param \sajari\engine\query\FieldBoost\Text $value
     * @return \sajari\engine\query\FieldBoost
     */
    public function setText(\sajari\engine\query\FieldBoost\Text $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sajari\engine\query\InstanceBoost {

  class Field extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.InstanceBoost.Field');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\InstanceBoost\Field
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\query\InstanceBoost\Field
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\InstanceBoost\Field
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\InstanceBoost\Field
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\InstanceBoost {

  class Score extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $threshold = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.InstanceBoost.Score');

      // OPTIONAL DOUBLE threshold = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "threshold";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <threshold> has a value
     *
     * @return boolean
     */
    public function hasThreshold(){
      return $this->_has(1);
    }

    /**
     * Clear <threshold> value
     *
     * @return \sajari\engine\query\InstanceBoost\Score
     */
    public function clearThreshold(){
      return $this->_clear(1);
    }

    /**
     * Get <threshold> value
     *
     * @return float
     */
    public function getThreshold(){
      return $this->_get(1);
    }

    /**
     * Set <threshold> value
     *
     * @param float $value
     * @return \sajari\engine\query\InstanceBoost\Score
     */
    public function setThreshold( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\query {

  class InstanceBoost extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\InstanceBoost\Field */
    public $field = null;

    /**  @var \sajari\engine\query\InstanceBoost\Score */
    public $score = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.InstanceBoost');

      // OPTIONAL MESSAGE field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\InstanceBoost\Field';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\InstanceBoost\Score';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \sajari\engine\query\InstanceBoost
     */
    public function clearField(){
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return \sajari\engine\query\InstanceBoost\Field
     */
    public function getField(){
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param \sajari\engine\query\InstanceBoost\Field $value
     * @return \sajari\engine\query\InstanceBoost
     */
    public function setField(\sajari\engine\query\InstanceBoost\Field $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }

    /**
     * Clear <score> value
     *
     * @return \sajari\engine\query\InstanceBoost
     */
    public function clearScore(){
      return $this->_clear(2);
    }

    /**
     * Get <score> value
     *
     * @return \sajari\engine\query\InstanceBoost\Score
     */
    public function getScore(){
      return $this->_get(2);
    }

    /**
     * Set <score> value
     *
     * @param \sajari\engine\query\InstanceBoost\Score $value
     * @return \sajari\engine\query\InstanceBoost
     */
    public function setScore(\sajari\engine\query\InstanceBoost\Score $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse {

  class Metric extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Metric');

      // OPTIONAL DOUBLE value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\AggregateResponse\Metric
     */
    public function clearValue(){
      return $this->_clear(1);
    }

    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(1);
    }

    /**
     * Set <value> value
     *
     * @param float $value
     * @return \sajari\engine\query\AggregateResponse\Metric
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse\Count {

  class CountsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var int */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Count.CountsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param int $value
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse {

  class Count extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\AggregateResponse\Count\CountsEntry[]  */
    public $counts = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Count');

      // REPEATED MESSAGE counts = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "counts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\AggregateResponse\Count\CountsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <counts> has a value
     *
     * @return boolean
     */
    public function hasCounts(){
      return $this->_has(1);
    }

    /**
     * Clear <counts> value
     *
     * @return \sajari\engine\query\AggregateResponse\Count
     */
    public function clearCounts(){
      return $this->_clear(1);
    }

    /**
     * Get <counts> value
     *
     * @param int $idx
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry
     */
    public function getCounts($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <counts> value
     *
     * @param \sajari\engine\query\AggregateResponse\Count\CountsEntry $value
     * @return \sajari\engine\query\AggregateResponse\Count
     */
    public function setCounts(\sajari\engine\query\AggregateResponse\Count\CountsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <counts>
     *
     * @return \sajari\engine\query\AggregateResponse\Count\CountsEntry[]
     */
    public function getCountsList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <counts>
     *
     * @param \sajari\engine\query\AggregateResponse\Count\CountsEntry $value
     * @return \sajari\engine\query\AggregateResponse\Count
     */
    public function addCounts(\sajari\engine\query\AggregateResponse\Count\CountsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse\Buckets {

  class Bucket extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;

    /**  @var int */
    public $count = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Buckets.Bucket');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\Bucket
     */
    public function clearName(){
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \sajari\engine\query\AggregateResponse\Buckets\Bucket
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }

    /**
     * Clear <count> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\Bucket
     */
    public function clearCount(){
      return $this->_clear(2);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \sajari\engine\query\AggregateResponse\Buckets\Bucket
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse\Buckets {

  class BucketsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var \sajari\engine\query\AggregateResponse\Buckets\Bucket */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Buckets.BucketsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\AggregateResponse\Buckets\Bucket';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\Bucket
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \sajari\engine\query\AggregateResponse\Buckets\Bucket $value
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry
     */
    public function setValue(\sajari\engine\query\AggregateResponse\Buckets\Bucket $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query\AggregateResponse {

  class Buckets extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry[]  */
    public $buckets = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse.Buckets');

      // REPEATED MESSAGE buckets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\AggregateResponse\Buckets\BucketsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(1);
    }

    /**
     * Clear <buckets> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets
     */
    public function clearBuckets(){
      return $this->_clear(1);
    }

    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry
     */
    public function getBuckets($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <buckets> value
     *
     * @param \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry $value
     * @return \sajari\engine\query\AggregateResponse\Buckets
     */
    public function setBuckets(\sajari\engine\query\AggregateResponse\Buckets\BucketsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <buckets>
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry[]
     */
    public function getBucketsList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <buckets>
     *
     * @param \sajari\engine\query\AggregateResponse\Buckets\BucketsEntry $value
     * @return \sajari\engine\query\AggregateResponse\Buckets
     */
    public function addBuckets(\sajari\engine\query\AggregateResponse\Buckets\BucketsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\query {

  class AggregateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\AggregateResponse\Metric */
    public $metric = null;

    /**  @var \sajari\engine\query\AggregateResponse\Count */
    public $count = null;

    /**  @var \sajari\engine\query\AggregateResponse\Buckets */
    public $buckets = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AggregateResponse');

      // OPTIONAL MESSAGE metric = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "metric";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\AggregateResponse\Metric';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\AggregateResponse\Count';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE buckets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\AggregateResponse\Buckets';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <metric> has a value
     *
     * @return boolean
     */
    public function hasMetric(){
      return $this->_has(1);
    }

    /**
     * Clear <metric> value
     *
     * @return \sajari\engine\query\AggregateResponse
     */
    public function clearMetric(){
      return $this->_clear(1);
    }

    /**
     * Get <metric> value
     *
     * @return \sajari\engine\query\AggregateResponse\Metric
     */
    public function getMetric(){
      return $this->_get(1);
    }

    /**
     * Set <metric> value
     *
     * @param \sajari\engine\query\AggregateResponse\Metric $value
     * @return \sajari\engine\query\AggregateResponse
     */
    public function setMetric(\sajari\engine\query\AggregateResponse\Metric $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }

    /**
     * Clear <count> value
     *
     * @return \sajari\engine\query\AggregateResponse
     */
    public function clearCount(){
      return $this->_clear(2);
    }

    /**
     * Get <count> value
     *
     * @return \sajari\engine\query\AggregateResponse\Count
     */
    public function getCount(){
      return $this->_get(2);
    }

    /**
     * Set <count> value
     *
     * @param \sajari\engine\query\AggregateResponse\Count $value
     * @return \sajari\engine\query\AggregateResponse
     */
    public function setCount(\sajari\engine\query\AggregateResponse\Count $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(3);
    }

    /**
     * Clear <buckets> value
     *
     * @return \sajari\engine\query\AggregateResponse
     */
    public function clearBuckets(){
      return $this->_clear(3);
    }

    /**
     * Get <buckets> value
     *
     * @return \sajari\engine\query\AggregateResponse\Buckets
     */
    public function getBuckets(){
      return $this->_get(3);
    }

    /**
     * Set <buckets> value
     *
     * @param \sajari\engine\query\AggregateResponse\Buckets $value
     * @return \sajari\engine\query\AggregateResponse
     */
    public function setBuckets(\sajari\engine\query\AggregateResponse\Buckets $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\query\SearchResponse {

  class AggregatesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var \sajari\engine\query\AggregateResponse */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SearchResponse.AggregatesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\AggregateResponse';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \sajari\engine\query\AggregateResponse
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \sajari\engine\query\AggregateResponse $value
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry
     */
    public function setValue(\sajari\engine\query\AggregateResponse $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class SearchResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $reads = null;

    /**  @var int */
    public $total_results = null;

    /**  @var string */
    public $time = null;

    /**  @var \sajari\engine\query\SearchResponse\AggregatesEntry[]  */
    public $aggregates = array();

    /**  @var \sajari\engine\query\Result[]  */
    public $results = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.SearchResponse');

      // OPTIONAL INT64 reads = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "reads";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 total_results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total_results";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE aggregates = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "aggregates";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\SearchResponse\AggregatesEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE results = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Result';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <reads> has a value
     *
     * @return boolean
     */
    public function hasReads(){
      return $this->_has(1);
    }

    /**
     * Clear <reads> value
     *
     * @return \sajari\engine\query\SearchResponse
     */
    public function clearReads(){
      return $this->_clear(1);
    }

    /**
     * Get <reads> value
     *
     * @return int
     */
    public function getReads(){
      return $this->_get(1);
    }

    /**
     * Set <reads> value
     *
     * @param int $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function setReads( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <total_results> has a value
     *
     * @return boolean
     */
    public function hasTotalResults(){
      return $this->_has(2);
    }

    /**
     * Clear <total_results> value
     *
     * @return \sajari\engine\query\SearchResponse
     */
    public function clearTotalResults(){
      return $this->_clear(2);
    }

    /**
     * Get <total_results> value
     *
     * @return int
     */
    public function getTotalResults(){
      return $this->_get(2);
    }

    /**
     * Set <total_results> value
     *
     * @param int $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function setTotalResults( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }

    /**
     * Clear <time> value
     *
     * @return \sajari\engine\query\SearchResponse
     */
    public function clearTime(){
      return $this->_clear(3);
    }

    /**
     * Get <time> value
     *
     * @return string
     */
    public function getTime(){
      return $this->_get(3);
    }

    /**
     * Set <time> value
     *
     * @param string $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <aggregates> has a value
     *
     * @return boolean
     */
    public function hasAggregates(){
      return $this->_has(4);
    }

    /**
     * Clear <aggregates> value
     *
     * @return \sajari\engine\query\SearchResponse
     */
    public function clearAggregates(){
      return $this->_clear(4);
    }

    /**
     * Get <aggregates> value
     *
     * @param int $idx
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry
     */
    public function getAggregates($idx = NULL){
      return $this->_get(4, $idx);
    }

    /**
     * Set <aggregates> value
     *
     * @param \sajari\engine\query\SearchResponse\AggregatesEntry $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function setAggregates(\sajari\engine\query\SearchResponse\AggregatesEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <aggregates>
     *
     * @return \sajari\engine\query\SearchResponse\AggregatesEntry[]
     */
    public function getAggregatesList(){
     return $this->_get(4);
    }

    /**
     * Add a new element to <aggregates>
     *
     * @param \sajari\engine\query\SearchResponse\AggregatesEntry $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function addAggregates(\sajari\engine\query\SearchResponse\AggregatesEntry $value){
     return $this->_add(4, $value);
    }

    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(5);
    }

    /**
     * Clear <results> value
     *
     * @return \sajari\engine\query\SearchResponse
     */
    public function clearResults(){
      return $this->_clear(5);
    }

    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Result
     */
    public function getResults($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <results> value
     *
     * @param \sajari\engine\query\Result $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function setResults(\sajari\engine\query\Result $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <results>
     *
     * @return \sajari\engine\query\Result[]
     */
    public function getResultsList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <results>
     *
     * @param \sajari\engine\query\Result $value
     * @return \sajari\engine\query\SearchResponse
     */
    public function addResults(\sajari\engine\query\Result $value){
     return $this->_add(5, $value);
    }
  }
}

namespace sajari\engine\query\Result {

  class ValuesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var \sajari\engine\Value */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Result.ValuesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \sajari\engine\query\Result\ValuesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\query\Result\ValuesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \sajari\engine\query\Result\ValuesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \sajari\engine\Value
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \sajari\engine\Value $value
     * @return \sajari\engine\query\Result\ValuesEntry
     */
    public function setValue(\sajari\engine\Value $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class Result extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\Result\ValuesEntry[]  */
    public $values = array();

    /**  @var float */
    public $score = null;

    /**  @var float */
    public $raw_score = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.Result');

      // REPEATED MESSAGE values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\Result\ValuesEntry';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE raw_score = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "raw_score";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }

    /**
     * Clear <values> value
     *
     * @return \sajari\engine\query\Result
     */
    public function clearValues(){
      return $this->_clear(1);
    }

    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \sajari\engine\query\Result\ValuesEntry
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <values> value
     *
     * @param \sajari\engine\query\Result\ValuesEntry $value
     * @return \sajari\engine\query\Result
     */
    public function setValues(\sajari\engine\query\Result\ValuesEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <values>
     *
     * @return \sajari\engine\query\Result\ValuesEntry[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <values>
     *
     * @param \sajari\engine\query\Result\ValuesEntry $value
     * @return \sajari\engine\query\Result
     */
    public function addValues(\sajari\engine\query\Result\ValuesEntry $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }

    /**
     * Clear <score> value
     *
     * @return \sajari\engine\query\Result
     */
    public function clearScore(){
      return $this->_clear(2);
    }

    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(2);
    }

    /**
     * Set <score> value
     *
     * @param float $value
     * @return \sajari\engine\query\Result
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <raw_score> has a value
     *
     * @return boolean
     */
    public function hasRawScore(){
      return $this->_has(3);
    }

    /**
     * Clear <raw_score> value
     *
     * @return \sajari\engine\query\Result
     */
    public function clearRawScore(){
      return $this->_clear(3);
    }

    /**
     * Get <raw_score> value
     *
     * @return float
     */
    public function getRawScore(){
      return $this->_get(3);
    }

    /**
     * Set <raw_score> value
     *
     * @param float $value
     * @return \sajari\engine\query\Result
     */
    public function setRawScore( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sajari\engine\query {

  class AnalyseRequest extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\SearchRequest */
    public $search_request = null;

    /**  @var \sajari\engine\Key[]  */
    public $keys = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AnalyseRequest');

      // OPTIONAL MESSAGE search_request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "search_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\query\SearchRequest';
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <search_request> has a value
     *
     * @return boolean
     */
    public function hasSearchRequest(){
      return $this->_has(1);
    }

    /**
     * Clear <search_request> value
     *
     * @return \sajari\engine\query\AnalyseRequest
     */
    public function clearSearchRequest(){
      return $this->_clear(1);
    }

    /**
     * Get <search_request> value
     *
     * @return \sajari\engine\query\SearchRequest
     */
    public function getSearchRequest(){
      return $this->_get(1);
    }

    /**
     * Set <search_request> value
     *
     * @param \sajari\engine\query\SearchRequest $value
     * @return \sajari\engine\query\AnalyseRequest
     */
    public function setSearchRequest(\sajari\engine\query\SearchRequest $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(2);
    }

    /**
     * Clear <keys> value
     *
     * @return \sajari\engine\query\AnalyseRequest
     */
    public function clearKeys(){
      return $this->_clear(2);
    }

    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \sajari\engine\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <keys> value
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\query\AnalyseRequest
     */
    public function setKeys(\sajari\engine\Key $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <keys>
     *
     * @return \sajari\engine\Key[]
     */
    public function getKeysList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <keys>
     *
     * @param \sajari\engine\Key $value
     * @return \sajari\engine\query\AnalyseRequest
     */
    public function addKeys(\sajari\engine\Key $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query\AnalyseResponse {

  class Terms extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $terms = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AnalyseResponse.Terms');

      // REPEATED STRING terms = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "terms";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms(){
      return $this->_has(1);
    }

    /**
     * Clear <terms> value
     *
     * @return \sajari\engine\query\AnalyseResponse\Terms
     */
    public function clearTerms(){
      return $this->_clear(1);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return string
     */
    public function getTerms($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param string $value
     * @return \sajari\engine\query\AnalyseResponse\Terms
     */
    public function setTerms( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return string[]
     */
    public function getTermsList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <terms>
     *
     * @param string $value
     * @return \sajari\engine\query\AnalyseResponse\Terms
     */
    public function addTerms( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\query {

  class AnalyseResponse extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\query\AnalyseResponse\Terms[]  */
    public $terms = array();

    /**  @var \sajari\engine\Status[]  */
    public $status = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.query.AnalyseResponse');

      // REPEATED MESSAGE terms = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "terms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\query\AnalyseResponse\Terms';
      $descriptor->addField($f);

      // REPEATED MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms(){
      return $this->_has(1);
    }

    /**
     * Clear <terms> value
     *
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function clearTerms(){
      return $this->_clear(1);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \sajari\engine\query\AnalyseResponse\Terms
     */
    public function getTerms($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param \sajari\engine\query\AnalyseResponse\Terms $value
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function setTerms(\sajari\engine\query\AnalyseResponse\Terms $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return \sajari\engine\query\AnalyseResponse\Terms[]
     */
    public function getTermsList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <terms>
     *
     * @param \sajari\engine\query\AnalyseResponse\Terms $value
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function addTerms(\sajari\engine\query\AnalyseResponse\Terms $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }

    /**
     * Clear <status> value
     *
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function clearStatus(){
      return $this->_clear(2);
    }

    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \sajari\engine\Status
     */
    public function getStatus($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <status> value
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function setStatus(\sajari\engine\Status $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <status>
     *
     * @return \sajari\engine\Status[]
     */
    public function getStatusList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <status>
     *
     * @param \sajari\engine\Status $value
     * @return \sajari\engine\query\AnalyseResponse
     */
    public function addStatus(\sajari\engine\Status $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\query {

  class QueryClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param sajari\engine\query\SearchRequest $input
     */
    public function Search(\sajari\engine\query\SearchRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.query.Query/Search', $argument, '\sajari\engine\query\SearchResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\query\EvaluateRequest $input
     */
    public function Evaluate(\sajari\engine\query\EvaluateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.query.Query/Evaluate', $argument, '\sajari\engine\query\SearchResponse::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\query\SubstituteRequest $input
     */
    public function Substitute(\sajari\engine\query\SubstituteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.query.Query/Substitute', $argument, '\sajari\engine\query\SearchRequest::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\query\AnalyseRequest $input
     */
    public function Analyse(\sajari\engine\query\AnalyseRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.query.Query/Analyse', $argument, '\sajari\engine\query\AnalyseResponse::deserialize', $metadata, $options);
    }
  }
}
