<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: doc.proto
//   Date: 2016-05-20 03:33:14

namespace sajari\engine\store\doc {

  class XEmpty extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Empty');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace sajari\engine\store\doc\Documents\Document {

  class MetaEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Documents.Document.MetaEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store\doc\Documents {

  class Document extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\doc\Documents\Document\MetaEntry[]  */
    public $meta = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Documents.Document');

      // REPEATED MESSAGE meta = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "meta";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\doc\Documents\Document\MetaEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <meta> has a value
     *
     * @return boolean
     */
    public function hasMeta(){
      return $this->_has(1);
    }
    
    /**
     * Clear <meta> value
     *
     * @return \sajari\engine\store\doc\Documents\Document
     */
    public function clearMeta(){
      return $this->_clear(1);
    }
    
    /**
     * Get <meta> value
     *
     * @param int $idx
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry
     */
    public function getMeta($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <meta> value
     *
     * @param \sajari\engine\store\doc\Documents\Document\MetaEntry $value
     * @return \sajari\engine\store\doc\Documents\Document
     */
    public function setMeta(\sajari\engine\store\doc\Documents\Document\MetaEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <meta>
     *
     * @return \sajari\engine\store\doc\Documents\Document\MetaEntry[]
     */
    public function getMetaList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <meta>
     *
     * @param \sajari\engine\store\doc\Documents\Document\MetaEntry $value
     * @return \sajari\engine\store\doc\Documents\Document
     */
    public function addMeta(\sajari\engine\store\doc\Documents\Document\MetaEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\doc {

  class Documents extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\doc\Documents\Document[]  */
    public $documents = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Documents');

      // REPEATED MESSAGE documents = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "documents";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\doc\Documents\Document';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <documents> has a value
     *
     * @return boolean
     */
    public function hasDocuments(){
      return $this->_has(1);
    }
    
    /**
     * Clear <documents> value
     *
     * @return \sajari\engine\store\doc\Documents
     */
    public function clearDocuments(){
      return $this->_clear(1);
    }
    
    /**
     * Get <documents> value
     *
     * @param int $idx
     * @return \sajari\engine\store\doc\Documents\Document
     */
    public function getDocuments($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <documents> value
     *
     * @param \sajari\engine\store\doc\Documents\Document $value
     * @return \sajari\engine\store\doc\Documents
     */
    public function setDocuments(\sajari\engine\store\doc\Documents\Document $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <documents>
     *
     * @return \sajari\engine\store\doc\Documents\Document[]
     */
    public function getDocumentsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <documents>
     *
     * @param \sajari\engine\store\doc\Documents\Document $value
     * @return \sajari\engine\store\doc\Documents
     */
    public function addDocuments(\sajari\engine\store\doc\Documents\Document $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\doc\Keys {

  class Key extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Keys.Key');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field> value
     *
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function clearField(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }
    
    /**
     * Set <field> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store\doc {

  class Keys extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\doc\Keys\Key[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.Keys');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\doc\Keys\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \sajari\engine\store\doc\Keys
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \sajari\engine\store\doc\Keys\Key $value
     * @return \sajari\engine\store\doc\Keys
     */
    public function setKeys(\sajari\engine\store\doc\Keys\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \sajari\engine\store\doc\Keys\Key[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \sajari\engine\store\doc\Keys\Key $value
     * @return \sajari\engine\store\doc\Keys
     */
    public function addKeys(\sajari\engine\store\doc\Keys\Key $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\doc\KeysMetas\KeyMeta {

  class MetaEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.KeysMetas.KeyMeta.MetaEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sajari\engine\store\doc\KeysMetas {

  class KeyMeta extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\doc\Keys\Key */
    public $key = null;
    
    /**  @var \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry[]  */
    public $meta = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.KeysMetas.KeyMeta');

      // OPTIONAL MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sajari\engine\store\doc\Keys\Key';
      $descriptor->addField($f);

      // REPEATED MESSAGE meta = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "meta";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return \sajari\engine\store\doc\Keys\Key
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param \sajari\engine\store\doc\Keys\Key $value
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function setKey(\sajari\engine\store\doc\Keys\Key $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <meta> has a value
     *
     * @return boolean
     */
    public function hasMeta(){
      return $this->_has(2);
    }
    
    /**
     * Clear <meta> value
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function clearMeta(){
      return $this->_clear(2);
    }
    
    /**
     * Get <meta> value
     *
     * @param int $idx
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry
     */
    public function getMeta($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <meta> value
     *
     * @param \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry $value
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function setMeta(\sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <meta>
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry[]
     */
    public function getMetaList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <meta>
     *
     * @param \sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry $value
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function addMeta(\sajari\engine\store\doc\KeysMetas\KeyMeta\MetaEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sajari\engine\store\doc {

  class KeysMetas extends \DrSlump\Protobuf\Message {

    /**  @var \sajari\engine\store\doc\KeysMetas\KeyMeta[]  */
    public $keys_metas = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sajari.engine.store.doc.KeysMetas');

      // REPEATED MESSAGE keys_metas = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys_metas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sajari\engine\store\doc\KeysMetas\KeyMeta';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys_metas> has a value
     *
     * @return boolean
     */
    public function hasKeysMetas(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys_metas> value
     *
     * @return \sajari\engine\store\doc\KeysMetas
     */
    public function clearKeysMetas(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys_metas> value
     *
     * @param int $idx
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta
     */
    public function getKeysMetas($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys_metas> value
     *
     * @param \sajari\engine\store\doc\KeysMetas\KeyMeta $value
     * @return \sajari\engine\store\doc\KeysMetas
     */
    public function setKeysMetas(\sajari\engine\store\doc\KeysMetas\KeyMeta $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys_metas>
     *
     * @return \sajari\engine\store\doc\KeysMetas\KeyMeta[]
     */
    public function getKeysMetasList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys_metas>
     *
     * @param \sajari\engine\store\doc\KeysMetas\KeyMeta $value
     * @return \sajari\engine\store\doc\KeysMetas
     */
    public function addKeysMetas(\sajari\engine\store\doc\KeysMetas\KeyMeta $value){
     return $this->_add(1, $value);
    }
  }
}

namespace sajari\engine\store\doc {

  class DocumentClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param sajari\engine\store\doc\Documents $input
     */
    public function Add(\sajari\engine\store\doc\Documents $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.doc.Document/Add', $argument, '\sajari\engine\store\doc\Keys::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\doc\Keys $input
     */
    public function Get(\sajari\engine\store\doc\Keys $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.doc.Document/Get', $argument, '\sajari\engine\store\doc\Documents::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\doc\Keys $input
     */
    public function Delete(\sajari\engine\store\doc\Keys $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.doc.Document/Delete', $argument, '\sajari\engine\store\doc\XEmpty::deserialize', $metadata, $options);
    }
    /**
     * @param sajari\engine\store\doc\KeysMetas $input
     */
    public function Patch(\sajari\engine\store\doc\KeysMetas $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sajari.engine.store.doc.Document/Patch', $argument, '\sajari\engine\store\doc\XEmpty::deserialize', $metadata, $options);
    }
  }
}
